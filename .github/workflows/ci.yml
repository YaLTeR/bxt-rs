name: CI

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 1 * *' # Monthly

jobs:
  build:
    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-20.04, windows-2019]
        rust: [stable, beta]
        features: ['', vulkan-debug, profiling, 'vulkan-debug,profiling', bxt-compatibility]
        configuration: [debug, release]

        exclude:
          - configuration: release
            rust: beta
          - configuration: release
            features: vulkan-debug
          - configuration: release
            features: 'vulkan-debug,profiling'

          # We want only a release profile build, but on Windows hawktracer fails to build on release.
          - configuration: debug
            features: profiling
            os: ubuntu-20.04
          - configuration: release
            features: profiling
            os: windows-2019

          - configuration: debug
            features: bxt-compatibility

          - rust: beta
            features: vulkan-debug
          - rust: beta
            features: profiling
          - rust: beta
            features: 'vulkan-debug,profiling'
          - rust: beta
            features: bxt-compatibility

        include:
          - os: ubuntu-20.04
            label: Ubuntu
            target: i686-unknown-linux-gnu
            filename: libbxt_rs.so

          - os: windows-2019
            label: Windows
            target: i686-pc-windows-msvc
            filename: bxt_rs.dll

          - configuration: release
            release-flag: '--release'

          - features: profiling
            profiling-dep: lib32stdc++-9-dev
          - features: 'vulkan-debug,profiling'
            profiling-dep: lib32stdc++-9-dev

    name: ${{ matrix.rust }} - ${{ matrix.label }} - ${{ matrix.configuration }} - ${{ matrix.features }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install libc6-dev-i386 ${{ matrix.profiling-dep }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.target }} ${{ matrix.release-flag }} --features=${{ matrix.features }}

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --target ${{ matrix.target }} ${{ matrix.release-flag }} --features=${{ matrix.features }}

      - uses: actions/upload-artifact@v2
        if: matrix.rust == 'stable' && matrix.features != 'vulkan-debug,profiling'
        with:
          name: bxt-rs-${{ runner.os }}-${{ matrix.configuration }}-${{ matrix.features }}
          path: target/${{ matrix.target }}/${{ matrix.configuration }}/${{ matrix.filename }}
          if-no-files-found: error

  clippy:
    strategy:
      fail-fast: false

      matrix:
        include:
          - os: ubuntu-20.04
            label: Ubuntu
            target: i686-unknown-linux-gnu

          - os: windows-2019
            label: Windows
            target: i686-pc-windows-msvc

    name: clippy - ${{ matrix.label }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
          target: ${{ matrix.target }}
          components: clippy

      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --target ${{ matrix.target }}

  rustfmt:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: nightly
          components: rustfmt

      - name: Run rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
