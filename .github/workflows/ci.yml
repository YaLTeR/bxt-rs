name: CI

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *' # Monthly

jobs:
  build:
    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-20.04, windows-2019]
        rust: [stable, beta]
        features: ['', vulkan-debug, profiling, 'vulkan-debug,profiling']
        configuration: [debug, release]
        cross: [no, yes]

        exclude:
          - configuration: release
            rust: beta
          - configuration: release
            features: vulkan-debug
          - configuration: release
            features: 'vulkan-debug,profiling'

          - cross: yes
            os: windows-2019

          # We want only a release profile build, but on Windows hawktracer fails to build on release.
          - configuration: debug
            features: profiling
            os: ubuntu-20.04
          - configuration: release
            features: profiling
            os: windows-2019

          # rust-hawktracer fails to build with explicit -m32 on the CI.
          - features: profiling
            os: ubuntu-20.04
          - features: 'vulkan-debug,profiling'
            os: ubuntu-20.04

          - rust: beta
            features: vulkan-debug
          - rust: beta
            features: profiling
          - rust: beta
            features: 'vulkan-debug,profiling'

        include:
          - os: ubuntu-20.04
            cross: no
            label: Ubuntu
            target: i686-unknown-linux-gnu
            filename: libbxt_rs.so

          - os: ubuntu-20.04
            cross: yes
            label: Debian (cross to Windows)
            target: i686-pc-windows-gnu
            filename: bxt_rs.dll
            cross-dep: gcc-mingw-w64-i686
            # MinGW on Ubuntu fails to link, so use rust:latest which is based on Debian.
            container: rust:latest

          - os: windows-2019
            label: Windows
            target: i686-pc-windows-msvc
            filename: bxt_rs.dll

          - configuration: release
            release-flag: '--release'

          - features: profiling
            profiling-dep: lib32stdc++-9-dev
          - features: 'vulkan-debug,profiling'
            profiling-dep: lib32stdc++-9-dev

    name: ${{ matrix.rust }} - ${{ matrix.label }} - ${{ matrix.configuration }} - ${{ matrix.features }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    steps:
      - uses: actions/checkout@v2
        with:
          # We need the full history to find the tag
          fetch-depth: 0

      # We need the tags for the version string inside bxt-rs
      - run: git fetch --force --tags

      # Install sudo so that the subsequent steps are the same between container and no container.
      - name: Install sudo
        if: job.container
        run: |
          apt-get update -y
          apt-get install sudo -y

      - name: Install dependencies
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libc6-dev-i386 ${{ matrix.profiling-dep }} ${{ matrix.cross-dep }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v1

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.target }} ${{ matrix.release-flag }} --features=${{ matrix.features }}

      - name: Test
        uses: actions-rs/cargo@v1
        # Testing cross-compiled build requires wine which is large. We test native Windows anyway so no need.
        if: |
          !matrix.cross
        with:
          command: test
          args: --target ${{ matrix.target }} ${{ matrix.release-flag }} --features=${{ matrix.features }}

      - uses: actions/upload-artifact@v2
        if: matrix.rust == 'stable' && matrix.features != 'vulkan-debug,profiling' && !matrix.cross
        with:
          name: bxt-rs-${{ runner.os }}-${{ matrix.configuration }}-${{ matrix.features }}
          path: target/${{ matrix.target }}/${{ matrix.configuration }}/${{ matrix.filename }}
          if-no-files-found: error

      - name: Prepare Release
        if: startsWith(github.ref, 'refs/tags/') && matrix.rust == 'stable' && matrix.configuration == 'release' && matrix.features == '' && !matrix.cross
        run: |
          cp target/${{ matrix.target }}/${{ matrix.configuration }}/${{ matrix.filename }} ${{ matrix.filename }}
          7z a bxt-rs-${{ runner.os }}.7z ${{ matrix.filename }} COPYING

      - name: Release
        if: startsWith(github.ref, 'refs/tags/') && matrix.rust == 'stable' && matrix.configuration == 'release' && matrix.features == '' && !matrix.cross
        uses: softprops/action-gh-release@v1
        with:
          files: bxt-rs-${{ runner.os }}.7z
          draft: true
          fail_on_unmatched_files: true

  clippy:
    strategy:
      fail-fast: false

      matrix:
        include:
          - os: ubuntu-20.04
            label: Ubuntu
            target: i686-unknown-linux-gnu

          - os: windows-2019
            label: Windows
            target: i686-pc-windows-msvc

    name: clippy - ${{ matrix.label }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install libc6-dev-i386

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
          target: ${{ matrix.target }}
          components: clippy

      - uses: Swatinem/rust-cache@v1

      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --target ${{ matrix.target }}
          name: clippy - ${{ matrix.label }}

  rustfmt:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: nightly
          components: rustfmt

      - name: Run rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
