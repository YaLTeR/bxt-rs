// bindgen halflife/common/triangleapi.h --allowlist-type "triangleapi_s" --
// --target=i686-unknown-linux-gnu -Ihalflife/{public,common,engine} -include mathlib.h -include
// const.h
// Keep everything before the generated part.
// The constants are `c_int` for code compatibility. Otherwise, the bindgen will generate `c_uint`.
// Add `--allowlist-var 'TRI_.*'` to generate the constants.

#![allow(unused, nonstandard_style, deref_nullptr, clippy::upper_case_acronyms)]

use std::mem::{align_of, size_of};
use std::os::raw::*;
use std::ptr::null;

use super::com_model::model_s;

pub const TRICULLSTYLE_TRI_FRONT: TRICULLSTYLE = 0;
pub const TRICULLSTYLE_TRI_NONE: TRICULLSTYLE = 1;
pub type TRICULLSTYLE = c_int;

pub const TRI_API_VERSION: c_int = 1;

pub const TRI_TRIANGLES: c_int = 0;
pub const TRI_TRIANGLE_FAN: c_int = 1;
pub const TRI_QUADS: c_int = 2;
pub const TRI_POLYGON: c_int = 3;
pub const TRI_LINES: c_int = 4;
pub const TRI_TRIANGLE_STRIP: c_int = 5;
pub const TRI_QUAD_STRIP: c_int = 6;

pub const kRenderNormal: c_int = 0;
pub const kRenderTransColor: c_int = 1;
pub const kRenderTransTexture: c_int = 2;
pub const kRenderGlow: c_int = 3;
pub const kRenderTransAlpha: c_int = 4;
pub const kRenderTransAdd: c_int = 5;

/* automatically generated by rust-bindgen 0.71.1 */

// intentionally commented out
// pub const TRICULLSTYLE_TRI_FRONT: TRICULLSTYLE = 0;
// pub const TRICULLSTYLE_TRI_NONE: TRICULLSTYLE = 1;
// pub type TRICULLSTYLE = ::std::os::raw::c_uint;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct triangleapi_s {
    pub version: ::std::os::raw::c_int,
    pub RenderMode: ::std::option::Option<unsafe extern "C" fn(mode: ::std::os::raw::c_int)>,
    pub Begin: ::std::option::Option<unsafe extern "C" fn(primitiveCode: ::std::os::raw::c_int)>,
    pub End: ::std::option::Option<unsafe extern "C" fn()>,
    pub Color4f: ::std::option::Option<unsafe extern "C" fn(r: f32, g: f32, b: f32, a: f32)>,
    pub Color4ub: ::std::option::Option<
        unsafe extern "C" fn(
            r: ::std::os::raw::c_uchar,
            g: ::std::os::raw::c_uchar,
            b: ::std::os::raw::c_uchar,
            a: ::std::os::raw::c_uchar,
        ),
    >,
    pub TexCoord2f: ::std::option::Option<unsafe extern "C" fn(u: f32, v: f32)>,
    // CHANGE THIS
    pub Vertex3fv: ::std::option::Option<unsafe extern "C" fn(worldPnt: *const f32)>,
    pub Vertex3f: ::std::option::Option<unsafe extern "C" fn(x: f32, y: f32, z: f32)>,
    pub Brightness: ::std::option::Option<unsafe extern "C" fn(brightness: f32)>,
    pub CullFace: ::std::option::Option<unsafe extern "C" fn(style: TRICULLSTYLE)>,
    pub SpriteTexture: ::std::option::Option<
        unsafe extern "C" fn(
            pSpriteModel: *mut model_s,
            frame: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    // CHANGE THIS
    pub WorldToScreen: ::std::option::Option<
        unsafe extern "C" fn(world: *const f32, screen: *mut f32) -> ::std::os::raw::c_int,
    >,
    pub Fog: ::std::option::Option<
        unsafe extern "C" fn(
            flFogColor: *mut f32,
            flStart: f32,
            flEnd: f32,
            bOn: ::std::os::raw::c_int,
        ),
    >,
    // CHANGE THIS
    pub ScreenToWorld:
        ::std::option::Option<unsafe extern "C" fn(screen: *const f32, world: *mut f32)>,
    pub GetMatrix:
        ::std::option::Option<unsafe extern "C" fn(pname: ::std::os::raw::c_int, matrix: *mut f32)>,
    pub BoxInPVS: ::std::option::Option<
        unsafe extern "C" fn(mins: *mut f32, maxs: *mut f32) -> ::std::os::raw::c_int,
    >,
    pub LightAtPoint: ::std::option::Option<unsafe extern "C" fn(pos: *mut f32, value: *mut f32)>,
    pub Color4fRendermode: ::std::option::Option<
        unsafe extern "C" fn(r: f32, g: f32, b: f32, a: f32, rendermode: ::std::os::raw::c_int),
    >,
    pub FogParams: ::std::option::Option<
        unsafe extern "C" fn(flDensity: f32, iFogSkybox: ::std::os::raw::c_int),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of triangleapi_s"][::std::mem::size_of::<triangleapi_s>() - 80usize];
    ["Alignment of triangleapi_s"][::std::mem::align_of::<triangleapi_s>() - 4usize];
    ["Offset of field: triangleapi_s::version"]
        [::std::mem::offset_of!(triangleapi_s, version) - 0usize];
    ["Offset of field: triangleapi_s::RenderMode"]
        [::std::mem::offset_of!(triangleapi_s, RenderMode) - 4usize];
    ["Offset of field: triangleapi_s::Begin"]
        [::std::mem::offset_of!(triangleapi_s, Begin) - 8usize];
    ["Offset of field: triangleapi_s::End"][::std::mem::offset_of!(triangleapi_s, End) - 12usize];
    ["Offset of field: triangleapi_s::Color4f"]
        [::std::mem::offset_of!(triangleapi_s, Color4f) - 16usize];
    ["Offset of field: triangleapi_s::Color4ub"]
        [::std::mem::offset_of!(triangleapi_s, Color4ub) - 20usize];
    ["Offset of field: triangleapi_s::TexCoord2f"]
        [::std::mem::offset_of!(triangleapi_s, TexCoord2f) - 24usize];
    ["Offset of field: triangleapi_s::Vertex3fv"]
        [::std::mem::offset_of!(triangleapi_s, Vertex3fv) - 28usize];
    ["Offset of field: triangleapi_s::Vertex3f"]
        [::std::mem::offset_of!(triangleapi_s, Vertex3f) - 32usize];
    ["Offset of field: triangleapi_s::Brightness"]
        [::std::mem::offset_of!(triangleapi_s, Brightness) - 36usize];
    ["Offset of field: triangleapi_s::CullFace"]
        [::std::mem::offset_of!(triangleapi_s, CullFace) - 40usize];
    ["Offset of field: triangleapi_s::SpriteTexture"]
        [::std::mem::offset_of!(triangleapi_s, SpriteTexture) - 44usize];
    ["Offset of field: triangleapi_s::WorldToScreen"]
        [::std::mem::offset_of!(triangleapi_s, WorldToScreen) - 48usize];
    ["Offset of field: triangleapi_s::Fog"][::std::mem::offset_of!(triangleapi_s, Fog) - 52usize];
    ["Offset of field: triangleapi_s::ScreenToWorld"]
        [::std::mem::offset_of!(triangleapi_s, ScreenToWorld) - 56usize];
    ["Offset of field: triangleapi_s::GetMatrix"]
        [::std::mem::offset_of!(triangleapi_s, GetMatrix) - 60usize];
    ["Offset of field: triangleapi_s::BoxInPVS"]
        [::std::mem::offset_of!(triangleapi_s, BoxInPVS) - 64usize];
    ["Offset of field: triangleapi_s::LightAtPoint"]
        [::std::mem::offset_of!(triangleapi_s, LightAtPoint) - 68usize];
    ["Offset of field: triangleapi_s::Color4fRendermode"]
        [::std::mem::offset_of!(triangleapi_s, Color4fRendermode) - 72usize];
    ["Offset of field: triangleapi_s::FogParams"]
        [::std::mem::offset_of!(triangleapi_s, FogParams) - 76usize];
};

// intentionally commented out
// #[repr(C)]
// #[derive(Debug, Copy, Clone)]
// pub struct model_s {
//     _unused: [u8; 0],
// }
