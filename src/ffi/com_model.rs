#![allow(unused, nonstandard_style)]
/* bindgen halflife/common/com_model.h --whitelist-type "mleaf_s|model_s" -- --target=i686-unknown-linux-gnu -Ihalflife/{public,common,engine} -include mathlib.h -include const.h > src/ffi/com_model.rs */
/* automatically generated by rust-bindgen 0.58.1 */

use std::{
    mem::{align_of, size_of},
    os::raw::*,
    ptr::null,
};

pub const qboolean_false_: qboolean = 0;
pub const qboolean_true_: qboolean = 1;
pub type qboolean = c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct color24 {
    pub r: c_uchar,
    pub g: c_uchar,
    pub b: c_uchar,
}
#[test]
fn bindgen_test_layout_color24() {
    assert_eq!(
        size_of::<color24>(),
        3usize,
        concat!("Size of: ", stringify!(color24))
    );
    assert_eq!(
        align_of::<color24>(),
        1usize,
        concat!("Alignment of ", stringify!(color24))
    );
    assert_eq!(
        unsafe { &(*(null::<color24>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(color24),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<color24>())).g as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(color24),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<color24>())).b as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(color24),
            "::",
            stringify!(b)
        )
    );
}
pub const modtype_t_mod_brush: modtype_t = 0;
pub const modtype_t_mod_sprite: modtype_t = 1;
pub const modtype_t_mod_alias: modtype_t = 2;
pub const modtype_t_mod_studio: modtype_t = 3;
pub type modtype_t = c_uint;
pub const synctype_t_ST_SYNC: synctype_t = 0;
pub const synctype_t_ST_RAND: synctype_t = 1;
pub type synctype_t = c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dmodel_t {
    pub mins: [f32; 3usize],
    pub maxs: [f32; 3usize],
    pub origin: [f32; 3usize],
    pub headnode: [c_int; 4usize],
    pub visleafs: c_int,
    pub firstface: c_int,
    pub numfaces: c_int,
}
#[test]
fn bindgen_test_layout_dmodel_t() {
    assert_eq!(
        size_of::<dmodel_t>(),
        64usize,
        concat!("Size of: ", stringify!(dmodel_t))
    );
    assert_eq!(
        align_of::<dmodel_t>(),
        4usize,
        concat!("Alignment of ", stringify!(dmodel_t))
    );
    assert_eq!(
        unsafe { &(*(null::<dmodel_t>())).mins as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dmodel_t),
            "::",
            stringify!(mins)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<dmodel_t>())).maxs as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dmodel_t),
            "::",
            stringify!(maxs)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<dmodel_t>())).origin as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dmodel_t),
            "::",
            stringify!(origin)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<dmodel_t>())).headnode as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(dmodel_t),
            "::",
            stringify!(headnode)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<dmodel_t>())).visleafs as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(dmodel_t),
            "::",
            stringify!(visleafs)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<dmodel_t>())).firstface as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(dmodel_t),
            "::",
            stringify!(firstface)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<dmodel_t>())).numfaces as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(dmodel_t),
            "::",
            stringify!(numfaces)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mplane_s {
    pub normal: [f32; 3],
    pub dist: f32,
    pub type_: c_uchar,
    pub signbits: c_uchar,
    pub pad: [c_uchar; 2usize],
}
#[test]
fn bindgen_test_layout_mplane_s() {
    assert_eq!(
        size_of::<mplane_s>(),
        20usize,
        concat!("Size of: ", stringify!(mplane_s))
    );
    assert_eq!(
        align_of::<mplane_s>(),
        4usize,
        concat!("Alignment of ", stringify!(mplane_s))
    );
    assert_eq!(
        unsafe { &(*(null::<mplane_s>())).normal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mplane_s),
            "::",
            stringify!(normal)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mplane_s>())).dist as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mplane_s),
            "::",
            stringify!(dist)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mplane_s>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mplane_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mplane_s>())).signbits as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(mplane_s),
            "::",
            stringify!(signbits)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mplane_s>())).pad as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(mplane_s),
            "::",
            stringify!(pad)
        )
    );
}
pub type mplane_t = mplane_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mvertex_t {
    pub position: [f32; 3],
}
#[test]
fn bindgen_test_layout_mvertex_t() {
    assert_eq!(
        size_of::<mvertex_t>(),
        12usize,
        concat!("Size of: ", stringify!(mvertex_t))
    );
    assert_eq!(
        align_of::<mvertex_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mvertex_t))
    );
    assert_eq!(
        unsafe { &(*(null::<mvertex_t>())).position as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mvertex_t),
            "::",
            stringify!(position)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct medge_t {
    pub v: [c_ushort; 2usize],
    pub cachededgeoffset: c_uint,
}
#[test]
fn bindgen_test_layout_medge_t() {
    assert_eq!(
        size_of::<medge_t>(),
        8usize,
        concat!("Size of: ", stringify!(medge_t))
    );
    assert_eq!(
        align_of::<medge_t>(),
        4usize,
        concat!("Alignment of ", stringify!(medge_t))
    );
    assert_eq!(
        unsafe { &(*(null::<medge_t>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(medge_t),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<medge_t>())).cachededgeoffset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(medge_t),
            "::",
            stringify!(cachededgeoffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct texture_s {
    pub name: [c_char; 16usize],
    pub width: c_uint,
    pub height: c_uint,
    pub anim_total: c_int,
    pub anim_min: c_int,
    pub anim_max: c_int,
    pub anim_next: *mut texture_s,
    pub alternate_anims: *mut texture_s,
    pub offsets: [c_uint; 4usize],
    pub paloffset: c_uint,
}
#[test]
fn bindgen_test_layout_texture_s() {
    assert_eq!(
        size_of::<texture_s>(),
        64usize,
        concat!("Size of: ", stringify!(texture_s))
    );
    assert_eq!(
        align_of::<texture_s>(),
        4usize,
        concat!("Alignment of ", stringify!(texture_s))
    );
    assert_eq!(
        unsafe { &(*(null::<texture_s>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(texture_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<texture_s>())).width as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(texture_s),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<texture_s>())).height as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(texture_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<texture_s>())).anim_total as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(texture_s),
            "::",
            stringify!(anim_total)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<texture_s>())).anim_min as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(texture_s),
            "::",
            stringify!(anim_min)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<texture_s>())).anim_max as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(texture_s),
            "::",
            stringify!(anim_max)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<texture_s>())).anim_next as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(texture_s),
            "::",
            stringify!(anim_next)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<texture_s>())).alternate_anims as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(texture_s),
            "::",
            stringify!(alternate_anims)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<texture_s>())).offsets as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(texture_s),
            "::",
            stringify!(offsets)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<texture_s>())).paloffset as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(texture_s),
            "::",
            stringify!(paloffset)
        )
    );
}
pub type texture_t = texture_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mtexinfo_t {
    pub vecs: [[f32; 4usize]; 2usize],
    pub mipadjust: f32,
    pub texture: *mut texture_t,
    pub flags: c_int,
}
#[test]
fn bindgen_test_layout_mtexinfo_t() {
    assert_eq!(
        size_of::<mtexinfo_t>(),
        44usize,
        concat!("Size of: ", stringify!(mtexinfo_t))
    );
    assert_eq!(
        align_of::<mtexinfo_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mtexinfo_t))
    );
    assert_eq!(
        unsafe { &(*(null::<mtexinfo_t>())).vecs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mtexinfo_t),
            "::",
            stringify!(vecs)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mtexinfo_t>())).mipadjust as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mtexinfo_t),
            "::",
            stringify!(mipadjust)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mtexinfo_t>())).texture as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mtexinfo_t),
            "::",
            stringify!(texture)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mtexinfo_t>())).flags as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mtexinfo_t),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mnode_s {
    pub contents: c_int,
    pub visframe: c_int,
    pub minmaxs: [c_short; 6usize],
    pub parent: *mut mnode_s,
    pub plane: *mut mplane_t,
    pub children: [*mut mnode_s; 2usize],
    pub firstsurface: c_ushort,
    pub numsurfaces: c_ushort,
}
#[test]
fn bindgen_test_layout_mnode_s() {
    assert_eq!(
        size_of::<mnode_s>(),
        40usize,
        concat!("Size of: ", stringify!(mnode_s))
    );
    assert_eq!(
        align_of::<mnode_s>(),
        4usize,
        concat!("Alignment of ", stringify!(mnode_s))
    );
    assert_eq!(
        unsafe { &(*(null::<mnode_s>())).contents as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mnode_s),
            "::",
            stringify!(contents)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mnode_s>())).visframe as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mnode_s),
            "::",
            stringify!(visframe)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mnode_s>())).minmaxs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mnode_s),
            "::",
            stringify!(minmaxs)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mnode_s>())).parent as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mnode_s),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mnode_s>())).plane as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mnode_s),
            "::",
            stringify!(plane)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mnode_s>())).children as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mnode_s),
            "::",
            stringify!(children)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mnode_s>())).firstsurface as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mnode_s),
            "::",
            stringify!(firstsurface)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mnode_s>())).numsurfaces as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(mnode_s),
            "::",
            stringify!(numsurfaces)
        )
    );
}
pub type mnode_t = mnode_s;
pub type msurface_t = msurface_s;
pub type decal_t = decal_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct decal_s {
    pub pnext: *mut decal_t,
    pub psurface: *mut msurface_t,
    pub dx: c_short,
    pub dy: c_short,
    pub texture: c_short,
    pub scale: c_uchar,
    pub flags: c_uchar,
    pub entityIndex: c_short,
}
#[test]
fn bindgen_test_layout_decal_s() {
    assert_eq!(
        size_of::<decal_s>(),
        20usize,
        concat!("Size of: ", stringify!(decal_s))
    );
    assert_eq!(
        align_of::<decal_s>(),
        4usize,
        concat!("Alignment of ", stringify!(decal_s))
    );
    assert_eq!(
        unsafe { &(*(null::<decal_s>())).pnext as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(decal_s),
            "::",
            stringify!(pnext)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<decal_s>())).psurface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(decal_s),
            "::",
            stringify!(psurface)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<decal_s>())).dx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(decal_s),
            "::",
            stringify!(dx)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<decal_s>())).dy as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(decal_s),
            "::",
            stringify!(dy)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<decal_s>())).texture as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(decal_s),
            "::",
            stringify!(texture)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<decal_s>())).scale as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(decal_s),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<decal_s>())).flags as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(decal_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<decal_s>())).entityIndex as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(decal_s),
            "::",
            stringify!(entityIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mleaf_s {
    pub contents: c_int,
    pub visframe: c_int,
    pub minmaxs: [c_short; 6usize],
    pub parent: *mut mnode_s,
    pub compressed_vis: *mut c_uchar,
    pub efrags: *mut efrag_s,
    pub firstmarksurface: *mut *mut msurface_t,
    pub nummarksurfaces: c_int,
    pub key: c_int,
    pub ambient_sound_level: [c_uchar; 4usize],
}
#[test]
fn bindgen_test_layout_mleaf_s() {
    assert_eq!(
        size_of::<mleaf_s>(),
        48usize,
        concat!("Size of: ", stringify!(mleaf_s))
    );
    assert_eq!(
        align_of::<mleaf_s>(),
        4usize,
        concat!("Alignment of ", stringify!(mleaf_s))
    );
    assert_eq!(
        unsafe { &(*(null::<mleaf_s>())).contents as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mleaf_s),
            "::",
            stringify!(contents)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mleaf_s>())).visframe as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mleaf_s),
            "::",
            stringify!(visframe)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mleaf_s>())).minmaxs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mleaf_s),
            "::",
            stringify!(minmaxs)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mleaf_s>())).parent as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mleaf_s),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mleaf_s>())).compressed_vis as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mleaf_s),
            "::",
            stringify!(compressed_vis)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mleaf_s>())).efrags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mleaf_s),
            "::",
            stringify!(efrags)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mleaf_s>())).firstmarksurface as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mleaf_s),
            "::",
            stringify!(firstmarksurface)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mleaf_s>())).nummarksurfaces as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mleaf_s),
            "::",
            stringify!(nummarksurfaces)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mleaf_s>())).key as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mleaf_s),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<mleaf_s>())).ambient_sound_level as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mleaf_s),
            "::",
            stringify!(ambient_sound_level)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msurface_s {
    pub visframe: c_int,
    pub dlightframe: c_int,
    pub dlightbits: c_int,
    pub plane: *mut mplane_t,
    pub flags: c_int,
    pub firstedge: c_int,
    pub numedges: c_int,
    pub cachespots: [*mut surfcache_s; 4usize],
    pub texturemins: [c_short; 2usize],
    pub extents: [c_short; 2usize],
    pub texinfo: *mut mtexinfo_t,
    pub styles: [c_uchar; 4usize],
    pub samples: *mut color24,
    pub pdecals: *mut decal_t,
}
#[test]
fn bindgen_test_layout_msurface_s() {
    assert_eq!(
        size_of::<msurface_s>(),
        68usize,
        concat!("Size of: ", stringify!(msurface_s))
    );
    assert_eq!(
        align_of::<msurface_s>(),
        4usize,
        concat!("Alignment of ", stringify!(msurface_s))
    );
    assert_eq!(
        unsafe { &(*(null::<msurface_s>())).visframe as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msurface_s),
            "::",
            stringify!(visframe)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<msurface_s>())).dlightframe as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(msurface_s),
            "::",
            stringify!(dlightframe)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<msurface_s>())).dlightbits as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msurface_s),
            "::",
            stringify!(dlightbits)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<msurface_s>())).plane as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(msurface_s),
            "::",
            stringify!(plane)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<msurface_s>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msurface_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<msurface_s>())).firstedge as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(msurface_s),
            "::",
            stringify!(firstedge)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<msurface_s>())).numedges as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msurface_s),
            "::",
            stringify!(numedges)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<msurface_s>())).cachespots as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(msurface_s),
            "::",
            stringify!(cachespots)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<msurface_s>())).texturemins as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(msurface_s),
            "::",
            stringify!(texturemins)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<msurface_s>())).extents as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msurface_s),
            "::",
            stringify!(extents)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<msurface_s>())).texinfo as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(msurface_s),
            "::",
            stringify!(texinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<msurface_s>())).styles as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(msurface_s),
            "::",
            stringify!(styles)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<msurface_s>())).samples as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(msurface_s),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<msurface_s>())).pdecals as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(msurface_s),
            "::",
            stringify!(pdecals)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dclipnode_t {
    pub planenum: c_int,
    pub children: [c_short; 2usize],
}
#[test]
fn bindgen_test_layout_dclipnode_t() {
    assert_eq!(
        size_of::<dclipnode_t>(),
        8usize,
        concat!("Size of: ", stringify!(dclipnode_t))
    );
    assert_eq!(
        align_of::<dclipnode_t>(),
        4usize,
        concat!("Alignment of ", stringify!(dclipnode_t))
    );
    assert_eq!(
        unsafe { &(*(null::<dclipnode_t>())).planenum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dclipnode_t),
            "::",
            stringify!(planenum)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<dclipnode_t>())).children as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dclipnode_t),
            "::",
            stringify!(children)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hull_s {
    pub clipnodes: *mut dclipnode_t,
    pub planes: *mut mplane_t,
    pub firstclipnode: c_int,
    pub lastclipnode: c_int,
    pub clip_mins: [f32; 3],
    pub clip_maxs: [f32; 3],
}
#[test]
fn bindgen_test_layout_hull_s() {
    assert_eq!(
        size_of::<hull_s>(),
        40usize,
        concat!("Size of: ", stringify!(hull_s))
    );
    assert_eq!(
        align_of::<hull_s>(),
        4usize,
        concat!("Alignment of ", stringify!(hull_s))
    );
    assert_eq!(
        unsafe { &(*(null::<hull_s>())).clipnodes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hull_s),
            "::",
            stringify!(clipnodes)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<hull_s>())).planes as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hull_s),
            "::",
            stringify!(planes)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<hull_s>())).firstclipnode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hull_s),
            "::",
            stringify!(firstclipnode)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<hull_s>())).lastclipnode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hull_s),
            "::",
            stringify!(lastclipnode)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<hull_s>())).clip_mins as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hull_s),
            "::",
            stringify!(clip_mins)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<hull_s>())).clip_maxs as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hull_s),
            "::",
            stringify!(clip_maxs)
        )
    );
}
pub type hull_t = hull_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cache_user_s {
    pub data: *mut c_void,
}
#[test]
fn bindgen_test_layout_cache_user_s() {
    assert_eq!(
        size_of::<cache_user_s>(),
        4usize,
        concat!("Size of: ", stringify!(cache_user_s))
    );
    assert_eq!(
        align_of::<cache_user_s>(),
        4usize,
        concat!("Alignment of ", stringify!(cache_user_s))
    );
    assert_eq!(
        unsafe { &(*(null::<cache_user_s>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cache_user_s),
            "::",
            stringify!(data)
        )
    );
}
pub type cache_user_t = cache_user_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct model_s {
    pub name: [c_char; 64usize],
    pub needload: qboolean,
    pub type_: modtype_t,
    pub numframes: c_int,
    pub synctype: synctype_t,
    pub flags: c_int,
    pub mins: [f32; 3],
    pub maxs: [f32; 3],
    pub radius: f32,
    pub firstmodelsurface: c_int,
    pub nummodelsurfaces: c_int,
    pub numsubmodels: c_int,
    pub submodels: *mut dmodel_t,
    pub numplanes: c_int,
    pub planes: *mut mplane_t,
    pub numleafs: c_int,
    pub leafs: *mut mleaf_s,
    pub numvertexes: c_int,
    pub vertexes: *mut mvertex_t,
    pub numedges: c_int,
    pub edges: *mut medge_t,
    pub numnodes: c_int,
    pub nodes: *mut mnode_t,
    pub numtexinfo: c_int,
    pub texinfo: *mut mtexinfo_t,
    pub numsurfaces: c_int,
    pub surfaces: *mut msurface_t,
    pub numsurfedges: c_int,
    pub surfedges: *mut c_int,
    pub numclipnodes: c_int,
    pub clipnodes: *mut dclipnode_t,
    pub nummarksurfaces: c_int,
    pub marksurfaces: *mut *mut msurface_t,
    pub hulls: [hull_t; 4usize],
    pub numtextures: c_int,
    pub textures: *mut *mut texture_t,
    pub visdata: *mut c_uchar,
    pub lightdata: *mut color24,
    pub entities: *mut c_char,
    pub cache: cache_user_t,
}
#[test]
fn bindgen_test_layout_model_s() {
    assert_eq!(
        size_of::<model_s>(),
        392usize,
        concat!("Size of: ", stringify!(model_s))
    );
    assert_eq!(
        align_of::<model_s>(),
        4usize,
        concat!("Alignment of ", stringify!(model_s))
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).needload as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(needload)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).type_ as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).numframes as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(numframes)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).synctype as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(synctype)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).flags as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).mins as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(mins)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).maxs as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(maxs)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).radius as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).firstmodelsurface as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(firstmodelsurface)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).nummodelsurfaces as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(nummodelsurfaces)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).numsubmodels as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(numsubmodels)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).submodels as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(submodels)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).numplanes as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(numplanes)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).planes as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(planes)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).numleafs as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(numleafs)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).leafs as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(leafs)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).numvertexes as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(numvertexes)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).vertexes as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(vertexes)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).numedges as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(numedges)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).edges as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(edges)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).numnodes as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(numnodes)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).nodes as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).numtexinfo as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(numtexinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).texinfo as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(texinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).numsurfaces as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(numsurfaces)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).surfaces as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(surfaces)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).numsurfedges as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(numsurfedges)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).surfedges as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(surfedges)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).numclipnodes as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(numclipnodes)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).clipnodes as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(clipnodes)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).nummarksurfaces as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(nummarksurfaces)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).marksurfaces as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(marksurfaces)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).hulls as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(hulls)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).numtextures as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(numtextures)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).textures as *const _ as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(textures)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).visdata as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(visdata)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).lightdata as *const _ as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(lightdata)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).entities as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(entities)
        )
    );
    assert_eq!(
        unsafe { &(*(null::<model_s>())).cache as *const _ as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(model_s),
            "::",
            stringify!(cache)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct efrag_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct surfcache_s {
    pub _address: u8,
}
