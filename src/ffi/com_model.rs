// bindgen halflife/common/com_model.h --allowlist-type "mleaf_s|model_s" --
// --target=i686-unknown-linux-gnu -Ihalflife/{public,common,engine} -include mathlib.h -include
// const.h
// Keep everything before the generated part.
#![allow(unused, nonstandard_style, deref_nullptr)]

/* automatically generated by rust-bindgen 0.71.1 */

#[doc = "\tCopyright (c) 1996-2002, Valve LLC. All rights reserved.\n\n\tThis product contains software technology licensed from Id\n\tSoftware, Inc. (\"Id Technology\").  Id Technology (c) 1996 Id Software, Inc.\n\tAll Rights Reserved.\n\n   Use, distribution, and modification of this source code and/or resulting\n   object code is restricted to non-commercial enhancements to products from\n   Valve LLC.  All other use, distribution, or modification is prohibited\n   without written permission from Valve LLC."]
pub type vec_t = f32;
pub type vec3_t = [vec_t; 3usize];
pub type byte = ::std::os::raw::c_uchar;
pub const qboolean_false_: qboolean = 0;
pub const qboolean_true_: qboolean = 1;
pub type qboolean = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct color24 {
    pub r: byte,
    pub g: byte,
    pub b: byte,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of color24"][::std::mem::size_of::<color24>() - 3usize];
    ["Alignment of color24"][::std::mem::align_of::<color24>() - 1usize];
    ["Offset of field: color24::r"][::std::mem::offset_of!(color24, r) - 0usize];
    ["Offset of field: color24::g"][::std::mem::offset_of!(color24, g) - 1usize];
    ["Offset of field: color24::b"][::std::mem::offset_of!(color24, b) - 2usize];
};
pub const modtype_t_mod_brush: modtype_t = 0;
pub const modtype_t_mod_sprite: modtype_t = 1;
pub const modtype_t_mod_alias: modtype_t = 2;
pub const modtype_t_mod_studio: modtype_t = 3;
pub type modtype_t = ::std::os::raw::c_uint;
pub const synctype_t_ST_SYNC: synctype_t = 0;
pub const synctype_t_ST_RAND: synctype_t = 1;
pub type synctype_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dmodel_t {
    pub mins: [f32; 3usize],
    pub maxs: [f32; 3usize],
    pub origin: [f32; 3usize],
    pub headnode: [::std::os::raw::c_int; 4usize],
    pub visleafs: ::std::os::raw::c_int,
    pub firstface: ::std::os::raw::c_int,
    pub numfaces: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dmodel_t"][::std::mem::size_of::<dmodel_t>() - 64usize];
    ["Alignment of dmodel_t"][::std::mem::align_of::<dmodel_t>() - 4usize];
    ["Offset of field: dmodel_t::mins"][::std::mem::offset_of!(dmodel_t, mins) - 0usize];
    ["Offset of field: dmodel_t::maxs"][::std::mem::offset_of!(dmodel_t, maxs) - 12usize];
    ["Offset of field: dmodel_t::origin"][::std::mem::offset_of!(dmodel_t, origin) - 24usize];
    ["Offset of field: dmodel_t::headnode"][::std::mem::offset_of!(dmodel_t, headnode) - 36usize];
    ["Offset of field: dmodel_t::visleafs"][::std::mem::offset_of!(dmodel_t, visleafs) - 52usize];
    ["Offset of field: dmodel_t::firstface"][::std::mem::offset_of!(dmodel_t, firstface) - 56usize];
    ["Offset of field: dmodel_t::numfaces"][::std::mem::offset_of!(dmodel_t, numfaces) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mplane_s {
    pub normal: vec3_t,
    pub dist: f32,
    pub type_: byte,
    pub signbits: byte,
    pub pad: [byte; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mplane_s"][::std::mem::size_of::<mplane_s>() - 20usize];
    ["Alignment of mplane_s"][::std::mem::align_of::<mplane_s>() - 4usize];
    ["Offset of field: mplane_s::normal"][::std::mem::offset_of!(mplane_s, normal) - 0usize];
    ["Offset of field: mplane_s::dist"][::std::mem::offset_of!(mplane_s, dist) - 12usize];
    ["Offset of field: mplane_s::type_"][::std::mem::offset_of!(mplane_s, type_) - 16usize];
    ["Offset of field: mplane_s::signbits"][::std::mem::offset_of!(mplane_s, signbits) - 17usize];
    ["Offset of field: mplane_s::pad"][::std::mem::offset_of!(mplane_s, pad) - 18usize];
};
pub type mplane_t = mplane_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mvertex_t {
    pub position: vec3_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mvertex_t"][::std::mem::size_of::<mvertex_t>() - 12usize];
    ["Alignment of mvertex_t"][::std::mem::align_of::<mvertex_t>() - 4usize];
    ["Offset of field: mvertex_t::position"][::std::mem::offset_of!(mvertex_t, position) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct medge_t {
    pub v: [::std::os::raw::c_ushort; 2usize],
    pub cachededgeoffset: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of medge_t"][::std::mem::size_of::<medge_t>() - 8usize];
    ["Alignment of medge_t"][::std::mem::align_of::<medge_t>() - 4usize];
    ["Offset of field: medge_t::v"][::std::mem::offset_of!(medge_t, v) - 0usize];
    ["Offset of field: medge_t::cachededgeoffset"]
        [::std::mem::offset_of!(medge_t, cachededgeoffset) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct texture_s {
    pub name: [::std::os::raw::c_char; 16usize],
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub anim_total: ::std::os::raw::c_int,
    pub anim_min: ::std::os::raw::c_int,
    pub anim_max: ::std::os::raw::c_int,
    pub anim_next: *mut texture_s,
    pub alternate_anims: *mut texture_s,
    pub offsets: [::std::os::raw::c_uint; 4usize],
    pub paloffset: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of texture_s"][::std::mem::size_of::<texture_s>() - 64usize];
    ["Alignment of texture_s"][::std::mem::align_of::<texture_s>() - 4usize];
    ["Offset of field: texture_s::name"][::std::mem::offset_of!(texture_s, name) - 0usize];
    ["Offset of field: texture_s::width"][::std::mem::offset_of!(texture_s, width) - 16usize];
    ["Offset of field: texture_s::height"][::std::mem::offset_of!(texture_s, height) - 20usize];
    ["Offset of field: texture_s::anim_total"]
        [::std::mem::offset_of!(texture_s, anim_total) - 24usize];
    ["Offset of field: texture_s::anim_min"][::std::mem::offset_of!(texture_s, anim_min) - 28usize];
    ["Offset of field: texture_s::anim_max"][::std::mem::offset_of!(texture_s, anim_max) - 32usize];
    ["Offset of field: texture_s::anim_next"]
        [::std::mem::offset_of!(texture_s, anim_next) - 36usize];
    ["Offset of field: texture_s::alternate_anims"]
        [::std::mem::offset_of!(texture_s, alternate_anims) - 40usize];
    ["Offset of field: texture_s::offsets"][::std::mem::offset_of!(texture_s, offsets) - 44usize];
    ["Offset of field: texture_s::paloffset"]
        [::std::mem::offset_of!(texture_s, paloffset) - 60usize];
};
pub type texture_t = texture_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mtexinfo_t {
    pub vecs: [[f32; 4usize]; 2usize],
    pub mipadjust: f32,
    pub texture: *mut texture_t,
    pub flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mtexinfo_t"][::std::mem::size_of::<mtexinfo_t>() - 44usize];
    ["Alignment of mtexinfo_t"][::std::mem::align_of::<mtexinfo_t>() - 4usize];
    ["Offset of field: mtexinfo_t::vecs"][::std::mem::offset_of!(mtexinfo_t, vecs) - 0usize];
    ["Offset of field: mtexinfo_t::mipadjust"]
        [::std::mem::offset_of!(mtexinfo_t, mipadjust) - 32usize];
    ["Offset of field: mtexinfo_t::texture"][::std::mem::offset_of!(mtexinfo_t, texture) - 36usize];
    ["Offset of field: mtexinfo_t::flags"][::std::mem::offset_of!(mtexinfo_t, flags) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mnode_s {
    pub contents: ::std::os::raw::c_int,
    pub visframe: ::std::os::raw::c_int,
    pub minmaxs: [::std::os::raw::c_short; 6usize],
    pub parent: *mut mnode_s,
    pub plane: *mut mplane_t,
    pub children: [*mut mnode_s; 2usize],
    pub firstsurface: ::std::os::raw::c_ushort,
    pub numsurfaces: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mnode_s"][::std::mem::size_of::<mnode_s>() - 40usize];
    ["Alignment of mnode_s"][::std::mem::align_of::<mnode_s>() - 4usize];
    ["Offset of field: mnode_s::contents"][::std::mem::offset_of!(mnode_s, contents) - 0usize];
    ["Offset of field: mnode_s::visframe"][::std::mem::offset_of!(mnode_s, visframe) - 4usize];
    ["Offset of field: mnode_s::minmaxs"][::std::mem::offset_of!(mnode_s, minmaxs) - 8usize];
    ["Offset of field: mnode_s::parent"][::std::mem::offset_of!(mnode_s, parent) - 20usize];
    ["Offset of field: mnode_s::plane"][::std::mem::offset_of!(mnode_s, plane) - 24usize];
    ["Offset of field: mnode_s::children"][::std::mem::offset_of!(mnode_s, children) - 28usize];
    ["Offset of field: mnode_s::firstsurface"]
        [::std::mem::offset_of!(mnode_s, firstsurface) - 36usize];
    ["Offset of field: mnode_s::numsurfaces"]
        [::std::mem::offset_of!(mnode_s, numsurfaces) - 38usize];
};
pub type mnode_t = mnode_s;
pub type msurface_t = msurface_s;
pub type decal_t = decal_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct decal_s {
    pub pnext: *mut decal_t,
    pub psurface: *mut msurface_t,
    pub dx: ::std::os::raw::c_short,
    pub dy: ::std::os::raw::c_short,
    pub texture: ::std::os::raw::c_short,
    pub scale: byte,
    pub flags: byte,
    pub entityIndex: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of decal_s"][::std::mem::size_of::<decal_s>() - 20usize];
    ["Alignment of decal_s"][::std::mem::align_of::<decal_s>() - 4usize];
    ["Offset of field: decal_s::pnext"][::std::mem::offset_of!(decal_s, pnext) - 0usize];
    ["Offset of field: decal_s::psurface"][::std::mem::offset_of!(decal_s, psurface) - 4usize];
    ["Offset of field: decal_s::dx"][::std::mem::offset_of!(decal_s, dx) - 8usize];
    ["Offset of field: decal_s::dy"][::std::mem::offset_of!(decal_s, dy) - 10usize];
    ["Offset of field: decal_s::texture"][::std::mem::offset_of!(decal_s, texture) - 12usize];
    ["Offset of field: decal_s::scale"][::std::mem::offset_of!(decal_s, scale) - 14usize];
    ["Offset of field: decal_s::flags"][::std::mem::offset_of!(decal_s, flags) - 15usize];
    ["Offset of field: decal_s::entityIndex"]
        [::std::mem::offset_of!(decal_s, entityIndex) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mleaf_s {
    pub contents: ::std::os::raw::c_int,
    pub visframe: ::std::os::raw::c_int,
    pub minmaxs: [::std::os::raw::c_short; 6usize],
    pub parent: *mut mnode_s,
    pub compressed_vis: *mut byte,
    pub efrags: *mut efrag_s,
    pub firstmarksurface: *mut *mut msurface_t,
    pub nummarksurfaces: ::std::os::raw::c_int,
    pub key: ::std::os::raw::c_int,
    pub ambient_sound_level: [byte; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mleaf_s"][::std::mem::size_of::<mleaf_s>() - 48usize];
    ["Alignment of mleaf_s"][::std::mem::align_of::<mleaf_s>() - 4usize];
    ["Offset of field: mleaf_s::contents"][::std::mem::offset_of!(mleaf_s, contents) - 0usize];
    ["Offset of field: mleaf_s::visframe"][::std::mem::offset_of!(mleaf_s, visframe) - 4usize];
    ["Offset of field: mleaf_s::minmaxs"][::std::mem::offset_of!(mleaf_s, minmaxs) - 8usize];
    ["Offset of field: mleaf_s::parent"][::std::mem::offset_of!(mleaf_s, parent) - 20usize];
    ["Offset of field: mleaf_s::compressed_vis"]
        [::std::mem::offset_of!(mleaf_s, compressed_vis) - 24usize];
    ["Offset of field: mleaf_s::efrags"][::std::mem::offset_of!(mleaf_s, efrags) - 28usize];
    ["Offset of field: mleaf_s::firstmarksurface"]
        [::std::mem::offset_of!(mleaf_s, firstmarksurface) - 32usize];
    ["Offset of field: mleaf_s::nummarksurfaces"]
        [::std::mem::offset_of!(mleaf_s, nummarksurfaces) - 36usize];
    ["Offset of field: mleaf_s::key"][::std::mem::offset_of!(mleaf_s, key) - 40usize];
    ["Offset of field: mleaf_s::ambient_sound_level"]
        [::std::mem::offset_of!(mleaf_s, ambient_sound_level) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msurface_s {
    pub visframe: ::std::os::raw::c_int,
    pub dlightframe: ::std::os::raw::c_int,
    pub dlightbits: ::std::os::raw::c_int,
    pub plane: *mut mplane_t,
    pub flags: ::std::os::raw::c_int,
    pub firstedge: ::std::os::raw::c_int,
    pub numedges: ::std::os::raw::c_int,
    pub cachespots: [*mut surfcache_s; 4usize],
    pub texturemins: [::std::os::raw::c_short; 2usize],
    pub extents: [::std::os::raw::c_short; 2usize],
    pub texinfo: *mut mtexinfo_t,
    pub styles: [byte; 4usize],
    pub samples: *mut color24,
    pub pdecals: *mut decal_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msurface_s"][::std::mem::size_of::<msurface_s>() - 68usize];
    ["Alignment of msurface_s"][::std::mem::align_of::<msurface_s>() - 4usize];
    ["Offset of field: msurface_s::visframe"]
        [::std::mem::offset_of!(msurface_s, visframe) - 0usize];
    ["Offset of field: msurface_s::dlightframe"]
        [::std::mem::offset_of!(msurface_s, dlightframe) - 4usize];
    ["Offset of field: msurface_s::dlightbits"]
        [::std::mem::offset_of!(msurface_s, dlightbits) - 8usize];
    ["Offset of field: msurface_s::plane"][::std::mem::offset_of!(msurface_s, plane) - 12usize];
    ["Offset of field: msurface_s::flags"][::std::mem::offset_of!(msurface_s, flags) - 16usize];
    ["Offset of field: msurface_s::firstedge"]
        [::std::mem::offset_of!(msurface_s, firstedge) - 20usize];
    ["Offset of field: msurface_s::numedges"]
        [::std::mem::offset_of!(msurface_s, numedges) - 24usize];
    ["Offset of field: msurface_s::cachespots"]
        [::std::mem::offset_of!(msurface_s, cachespots) - 28usize];
    ["Offset of field: msurface_s::texturemins"]
        [::std::mem::offset_of!(msurface_s, texturemins) - 44usize];
    ["Offset of field: msurface_s::extents"][::std::mem::offset_of!(msurface_s, extents) - 48usize];
    ["Offset of field: msurface_s::texinfo"][::std::mem::offset_of!(msurface_s, texinfo) - 52usize];
    ["Offset of field: msurface_s::styles"][::std::mem::offset_of!(msurface_s, styles) - 56usize];
    ["Offset of field: msurface_s::samples"][::std::mem::offset_of!(msurface_s, samples) - 60usize];
    ["Offset of field: msurface_s::pdecals"][::std::mem::offset_of!(msurface_s, pdecals) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dclipnode_t {
    pub planenum: ::std::os::raw::c_int,
    pub children: [::std::os::raw::c_short; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dclipnode_t"][::std::mem::size_of::<dclipnode_t>() - 8usize];
    ["Alignment of dclipnode_t"][::std::mem::align_of::<dclipnode_t>() - 4usize];
    ["Offset of field: dclipnode_t::planenum"]
        [::std::mem::offset_of!(dclipnode_t, planenum) - 0usize];
    ["Offset of field: dclipnode_t::children"]
        [::std::mem::offset_of!(dclipnode_t, children) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hull_s {
    pub clipnodes: *mut dclipnode_t,
    pub planes: *mut mplane_t,
    pub firstclipnode: ::std::os::raw::c_int,
    pub lastclipnode: ::std::os::raw::c_int,
    pub clip_mins: vec3_t,
    pub clip_maxs: vec3_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hull_s"][::std::mem::size_of::<hull_s>() - 40usize];
    ["Alignment of hull_s"][::std::mem::align_of::<hull_s>() - 4usize];
    ["Offset of field: hull_s::clipnodes"][::std::mem::offset_of!(hull_s, clipnodes) - 0usize];
    ["Offset of field: hull_s::planes"][::std::mem::offset_of!(hull_s, planes) - 4usize];
    ["Offset of field: hull_s::firstclipnode"]
        [::std::mem::offset_of!(hull_s, firstclipnode) - 8usize];
    ["Offset of field: hull_s::lastclipnode"]
        [::std::mem::offset_of!(hull_s, lastclipnode) - 12usize];
    ["Offset of field: hull_s::clip_mins"][::std::mem::offset_of!(hull_s, clip_mins) - 16usize];
    ["Offset of field: hull_s::clip_maxs"][::std::mem::offset_of!(hull_s, clip_maxs) - 28usize];
};
pub type hull_t = hull_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cache_user_s {
    pub data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cache_user_s"][::std::mem::size_of::<cache_user_s>() - 4usize];
    ["Alignment of cache_user_s"][::std::mem::align_of::<cache_user_s>() - 4usize];
    ["Offset of field: cache_user_s::data"][::std::mem::offset_of!(cache_user_s, data) - 0usize];
};
pub type cache_user_t = cache_user_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct model_s {
    pub name: [::std::os::raw::c_char; 64usize],
    pub needload: qboolean,
    pub type_: modtype_t,
    pub numframes: ::std::os::raw::c_int,
    pub synctype: synctype_t,
    pub flags: ::std::os::raw::c_int,
    pub mins: vec3_t,
    pub maxs: vec3_t,
    pub radius: f32,
    pub firstmodelsurface: ::std::os::raw::c_int,
    pub nummodelsurfaces: ::std::os::raw::c_int,
    pub numsubmodels: ::std::os::raw::c_int,
    pub submodels: *mut dmodel_t,
    pub numplanes: ::std::os::raw::c_int,
    pub planes: *mut mplane_t,
    pub numleafs: ::std::os::raw::c_int,
    pub leafs: *mut mleaf_s,
    pub numvertexes: ::std::os::raw::c_int,
    pub vertexes: *mut mvertex_t,
    pub numedges: ::std::os::raw::c_int,
    pub edges: *mut medge_t,
    pub numnodes: ::std::os::raw::c_int,
    pub nodes: *mut mnode_t,
    pub numtexinfo: ::std::os::raw::c_int,
    pub texinfo: *mut mtexinfo_t,
    pub numsurfaces: ::std::os::raw::c_int,
    pub surfaces: *mut msurface_t,
    pub numsurfedges: ::std::os::raw::c_int,
    pub surfedges: *mut ::std::os::raw::c_int,
    pub numclipnodes: ::std::os::raw::c_int,
    pub clipnodes: *mut dclipnode_t,
    pub nummarksurfaces: ::std::os::raw::c_int,
    pub marksurfaces: *mut *mut msurface_t,
    pub hulls: [hull_t; 4usize],
    pub numtextures: ::std::os::raw::c_int,
    pub textures: *mut *mut texture_t,
    pub visdata: *mut byte,
    pub lightdata: *mut color24,
    pub entities: *mut ::std::os::raw::c_char,
    pub cache: cache_user_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of model_s"][::std::mem::size_of::<model_s>() - 392usize];
    ["Alignment of model_s"][::std::mem::align_of::<model_s>() - 4usize];
    ["Offset of field: model_s::name"][::std::mem::offset_of!(model_s, name) - 0usize];
    ["Offset of field: model_s::needload"][::std::mem::offset_of!(model_s, needload) - 64usize];
    ["Offset of field: model_s::type_"][::std::mem::offset_of!(model_s, type_) - 68usize];
    ["Offset of field: model_s::numframes"][::std::mem::offset_of!(model_s, numframes) - 72usize];
    ["Offset of field: model_s::synctype"][::std::mem::offset_of!(model_s, synctype) - 76usize];
    ["Offset of field: model_s::flags"][::std::mem::offset_of!(model_s, flags) - 80usize];
    ["Offset of field: model_s::mins"][::std::mem::offset_of!(model_s, mins) - 84usize];
    ["Offset of field: model_s::maxs"][::std::mem::offset_of!(model_s, maxs) - 96usize];
    ["Offset of field: model_s::radius"][::std::mem::offset_of!(model_s, radius) - 108usize];
    ["Offset of field: model_s::firstmodelsurface"]
        [::std::mem::offset_of!(model_s, firstmodelsurface) - 112usize];
    ["Offset of field: model_s::nummodelsurfaces"]
        [::std::mem::offset_of!(model_s, nummodelsurfaces) - 116usize];
    ["Offset of field: model_s::numsubmodels"]
        [::std::mem::offset_of!(model_s, numsubmodels) - 120usize];
    ["Offset of field: model_s::submodels"][::std::mem::offset_of!(model_s, submodels) - 124usize];
    ["Offset of field: model_s::numplanes"][::std::mem::offset_of!(model_s, numplanes) - 128usize];
    ["Offset of field: model_s::planes"][::std::mem::offset_of!(model_s, planes) - 132usize];
    ["Offset of field: model_s::numleafs"][::std::mem::offset_of!(model_s, numleafs) - 136usize];
    ["Offset of field: model_s::leafs"][::std::mem::offset_of!(model_s, leafs) - 140usize];
    ["Offset of field: model_s::numvertexes"]
        [::std::mem::offset_of!(model_s, numvertexes) - 144usize];
    ["Offset of field: model_s::vertexes"][::std::mem::offset_of!(model_s, vertexes) - 148usize];
    ["Offset of field: model_s::numedges"][::std::mem::offset_of!(model_s, numedges) - 152usize];
    ["Offset of field: model_s::edges"][::std::mem::offset_of!(model_s, edges) - 156usize];
    ["Offset of field: model_s::numnodes"][::std::mem::offset_of!(model_s, numnodes) - 160usize];
    ["Offset of field: model_s::nodes"][::std::mem::offset_of!(model_s, nodes) - 164usize];
    ["Offset of field: model_s::numtexinfo"]
        [::std::mem::offset_of!(model_s, numtexinfo) - 168usize];
    ["Offset of field: model_s::texinfo"][::std::mem::offset_of!(model_s, texinfo) - 172usize];
    ["Offset of field: model_s::numsurfaces"]
        [::std::mem::offset_of!(model_s, numsurfaces) - 176usize];
    ["Offset of field: model_s::surfaces"][::std::mem::offset_of!(model_s, surfaces) - 180usize];
    ["Offset of field: model_s::numsurfedges"]
        [::std::mem::offset_of!(model_s, numsurfedges) - 184usize];
    ["Offset of field: model_s::surfedges"][::std::mem::offset_of!(model_s, surfedges) - 188usize];
    ["Offset of field: model_s::numclipnodes"]
        [::std::mem::offset_of!(model_s, numclipnodes) - 192usize];
    ["Offset of field: model_s::clipnodes"][::std::mem::offset_of!(model_s, clipnodes) - 196usize];
    ["Offset of field: model_s::nummarksurfaces"]
        [::std::mem::offset_of!(model_s, nummarksurfaces) - 200usize];
    ["Offset of field: model_s::marksurfaces"]
        [::std::mem::offset_of!(model_s, marksurfaces) - 204usize];
    ["Offset of field: model_s::hulls"][::std::mem::offset_of!(model_s, hulls) - 208usize];
    ["Offset of field: model_s::numtextures"]
        [::std::mem::offset_of!(model_s, numtextures) - 368usize];
    ["Offset of field: model_s::textures"][::std::mem::offset_of!(model_s, textures) - 372usize];
    ["Offset of field: model_s::visdata"][::std::mem::offset_of!(model_s, visdata) - 376usize];
    ["Offset of field: model_s::lightdata"][::std::mem::offset_of!(model_s, lightdata) - 380usize];
    ["Offset of field: model_s::entities"][::std::mem::offset_of!(model_s, entities) - 384usize];
    ["Offset of field: model_s::cache"][::std::mem::offset_of!(model_s, cache) - 388usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct efrag_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct surfcache_s {
    pub _address: u8,
}
