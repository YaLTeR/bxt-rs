// bindgen halflife/engine/edict.h --allowlist-type "edict_s" -- --target=i686-unknown-linux-gnu
// -Ihalflife/{public,common,engine} -include mathlib.h -include const.h
// Keep everything before the generated part.
// Change `entvars_s.flags` member to use `Flags` type.

#![allow(unused, nonstandard_style, deref_nullptr, clippy::upper_case_acronyms)]

use std::mem::{align_of, size_of};
use std::os::raw::*;
use std::ptr::null;

use bitflags::bitflags;

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq)]
    pub struct Flags: i32 {
        const FL_FLY = 1;
        const FL_SWIM = 1 << 1;
        const FL_CONVEYOR = 1 << 2;
        const FL_CLIENT = 1 << 3;
        const FL_INWATER = 1 << 4;
        const FL_MONSTER = 1 << 5;
        const FL_GODMODE = 1 << 6;
        const FL_NOTARGET = 1 << 7;
        const FL_SKIPLOCALHOST = 1 << 8;
        const FL_ONGROUND = 1 << 9;
        const FL_PARTIALGROUND = 1 << 10;
        const FL_WATERJUMP = 1 << 11;
        const FL_FROZEN = 1 << 12;
        const FL_FAKECLIENT = 1 << 13;
        const FL_DUCKING = 1 << 14;
        const FL_FLOAT = 1 << 15;
        const FL_GRAPHED = 1 << 16;
        const FL_IMMUNE_WATER = 1 << 17;
        const FL_IMMUNE_SLIME = 1 << 18;
        const FL_IMMUNE_LAVA = 1 << 19;
        const FL_PROXY = 1 << 20;
        const FL_ALWAYSTHINK = 1 << 21;
        const FL_BASEVELOCITY = 1 << 22;
        const FL_MONSTERCLIP = 1 << 23;
        const FL_ONTRAIN = 1 << 24;
        const FL_WORLDBRUSH = 1 << 25;
        const FL_SPECTATOR = 1 << 26;
        const FL_CUSTOMENTITY = 1 << 29;
        const FL_KILLME = 1 << 30;
        const FL_DORMANT = 1 << 31;
    }
}

/* automatically generated by rust-bindgen 0.71.1 */

#[doc = "\tCopyright (c) 1996-2002, Valve LLC. All rights reserved.\n\n\tThis product contains software technology licensed from Id\n\tSoftware, Inc. (\"Id Technology\").  Id Technology (c) 1996 Id Software, Inc.\n\tAll Rights Reserved.\n\n   Use, distribution, and modification of this source code and/or resulting\n   object code is restricted to non-commercial enhancements to products from\n   Valve LLC.  All other use, distribution, or modification is prohibited\n   without written permission from Valve LLC."]
pub type vec_t = f32;
pub type vec3_t = [vec_t; 3usize];
pub type string_t = ::std::os::raw::c_uint;
pub type byte = ::std::os::raw::c_uchar;
pub const qboolean_false_: qboolean = 0;
pub const qboolean_true_: qboolean = 1;
pub type qboolean = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct link_s {
    pub prev: *mut link_s,
    pub next: *mut link_s,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of link_s"][::std::mem::size_of::<link_s>() - 8usize];
    ["Alignment of link_s"][::std::mem::align_of::<link_s>() - 4usize];
    ["Offset of field: link_s::prev"][::std::mem::offset_of!(link_s, prev) - 0usize];
    ["Offset of field: link_s::next"][::std::mem::offset_of!(link_s, next) - 4usize];
};
pub type link_t = link_s;
pub type edict_t = edict_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct entvars_s {
    pub classname: string_t,
    pub globalname: string_t,
    pub origin: vec3_t,
    pub oldorigin: vec3_t,
    pub velocity: vec3_t,
    pub basevelocity: vec3_t,
    pub clbasevelocity: vec3_t,
    pub movedir: vec3_t,
    pub angles: vec3_t,
    pub avelocity: vec3_t,
    pub punchangle: vec3_t,
    pub v_angle: vec3_t,
    pub endpos: vec3_t,
    pub startpos: vec3_t,
    pub impacttime: f32,
    pub starttime: f32,
    pub fixangle: ::std::os::raw::c_int,
    pub idealpitch: f32,
    pub pitch_speed: f32,
    pub ideal_yaw: f32,
    pub yaw_speed: f32,
    pub modelindex: ::std::os::raw::c_int,
    pub model: string_t,
    pub viewmodel: ::std::os::raw::c_int,
    pub weaponmodel: ::std::os::raw::c_int,
    pub absmin: vec3_t,
    pub absmax: vec3_t,
    pub mins: vec3_t,
    pub maxs: vec3_t,
    pub size: vec3_t,
    pub ltime: f32,
    pub nextthink: f32,
    pub movetype: ::std::os::raw::c_int,
    pub solid: ::std::os::raw::c_int,
    pub skin: ::std::os::raw::c_int,
    pub body: ::std::os::raw::c_int,
    pub effects: ::std::os::raw::c_int,
    pub gravity: f32,
    pub friction: f32,
    pub light_level: ::std::os::raw::c_int,
    pub sequence: ::std::os::raw::c_int,
    pub gaitsequence: ::std::os::raw::c_int,
    pub frame: f32,
    pub animtime: f32,
    pub framerate: f32,
    pub controller: [byte; 4usize],
    pub blending: [byte; 2usize],
    pub scale: f32,
    pub rendermode: ::std::os::raw::c_int,
    pub renderamt: f32,
    pub rendercolor: vec3_t,
    pub renderfx: ::std::os::raw::c_int,
    pub health: f32,
    pub frags: f32,
    pub weapons: ::std::os::raw::c_int,
    pub takedamage: f32,
    pub deadflag: ::std::os::raw::c_int,
    pub view_ofs: vec3_t,
    pub button: ::std::os::raw::c_int,
    pub impulse: ::std::os::raw::c_int,
    pub chain: *mut edict_t,
    pub dmg_inflictor: *mut edict_t,
    pub enemy: *mut edict_t,
    pub aiment: *mut edict_t,
    pub owner: *mut edict_t,
    pub groundentity: *mut edict_t,
    pub spawnflags: ::std::os::raw::c_int,
    // CHANGE THIS
    pub flags: Flags,
    pub colormap: ::std::os::raw::c_int,
    pub team: ::std::os::raw::c_int,
    pub max_health: f32,
    pub teleport_time: f32,
    pub armortype: f32,
    pub armorvalue: f32,
    pub waterlevel: ::std::os::raw::c_int,
    pub watertype: ::std::os::raw::c_int,
    pub target: string_t,
    pub targetname: string_t,
    pub netname: string_t,
    pub message: string_t,
    pub dmg_take: f32,
    pub dmg_save: f32,
    pub dmg: f32,
    pub dmgtime: f32,
    pub noise: string_t,
    pub noise1: string_t,
    pub noise2: string_t,
    pub noise3: string_t,
    pub speed: f32,
    pub air_finished: f32,
    pub pain_finished: f32,
    pub radsuit_finished: f32,
    pub pContainingEntity: *mut edict_t,
    pub playerclass: ::std::os::raw::c_int,
    pub maxspeed: f32,
    pub fov: f32,
    pub weaponanim: ::std::os::raw::c_int,
    pub pushmsec: ::std::os::raw::c_int,
    pub bInDuck: ::std::os::raw::c_int,
    pub flTimeStepSound: ::std::os::raw::c_int,
    pub flSwimTime: ::std::os::raw::c_int,
    pub flDuckTime: ::std::os::raw::c_int,
    pub iStepLeft: ::std::os::raw::c_int,
    pub flFallVelocity: f32,
    pub gamestate: ::std::os::raw::c_int,
    pub oldbuttons: ::std::os::raw::c_int,
    pub groupinfo: ::std::os::raw::c_int,
    pub iuser1: ::std::os::raw::c_int,
    pub iuser2: ::std::os::raw::c_int,
    pub iuser3: ::std::os::raw::c_int,
    pub iuser4: ::std::os::raw::c_int,
    pub fuser1: f32,
    pub fuser2: f32,
    pub fuser3: f32,
    pub fuser4: f32,
    pub vuser1: vec3_t,
    pub vuser2: vec3_t,
    pub vuser3: vec3_t,
    pub vuser4: vec3_t,
    pub euser1: *mut edict_t,
    pub euser2: *mut edict_t,
    pub euser3: *mut edict_t,
    pub euser4: *mut edict_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of entvars_s"][::std::mem::size_of::<entvars_s>() - 676usize];
    ["Alignment of entvars_s"][::std::mem::align_of::<entvars_s>() - 4usize];
    ["Offset of field: entvars_s::classname"]
        [::std::mem::offset_of!(entvars_s, classname) - 0usize];
    ["Offset of field: entvars_s::globalname"]
        [::std::mem::offset_of!(entvars_s, globalname) - 4usize];
    ["Offset of field: entvars_s::origin"][::std::mem::offset_of!(entvars_s, origin) - 8usize];
    ["Offset of field: entvars_s::oldorigin"]
        [::std::mem::offset_of!(entvars_s, oldorigin) - 20usize];
    ["Offset of field: entvars_s::velocity"][::std::mem::offset_of!(entvars_s, velocity) - 32usize];
    ["Offset of field: entvars_s::basevelocity"]
        [::std::mem::offset_of!(entvars_s, basevelocity) - 44usize];
    ["Offset of field: entvars_s::clbasevelocity"]
        [::std::mem::offset_of!(entvars_s, clbasevelocity) - 56usize];
    ["Offset of field: entvars_s::movedir"][::std::mem::offset_of!(entvars_s, movedir) - 68usize];
    ["Offset of field: entvars_s::angles"][::std::mem::offset_of!(entvars_s, angles) - 80usize];
    ["Offset of field: entvars_s::avelocity"]
        [::std::mem::offset_of!(entvars_s, avelocity) - 92usize];
    ["Offset of field: entvars_s::punchangle"]
        [::std::mem::offset_of!(entvars_s, punchangle) - 104usize];
    ["Offset of field: entvars_s::v_angle"][::std::mem::offset_of!(entvars_s, v_angle) - 116usize];
    ["Offset of field: entvars_s::endpos"][::std::mem::offset_of!(entvars_s, endpos) - 128usize];
    ["Offset of field: entvars_s::startpos"]
        [::std::mem::offset_of!(entvars_s, startpos) - 140usize];
    ["Offset of field: entvars_s::impacttime"]
        [::std::mem::offset_of!(entvars_s, impacttime) - 152usize];
    ["Offset of field: entvars_s::starttime"]
        [::std::mem::offset_of!(entvars_s, starttime) - 156usize];
    ["Offset of field: entvars_s::fixangle"]
        [::std::mem::offset_of!(entvars_s, fixangle) - 160usize];
    ["Offset of field: entvars_s::idealpitch"]
        [::std::mem::offset_of!(entvars_s, idealpitch) - 164usize];
    ["Offset of field: entvars_s::pitch_speed"]
        [::std::mem::offset_of!(entvars_s, pitch_speed) - 168usize];
    ["Offset of field: entvars_s::ideal_yaw"]
        [::std::mem::offset_of!(entvars_s, ideal_yaw) - 172usize];
    ["Offset of field: entvars_s::yaw_speed"]
        [::std::mem::offset_of!(entvars_s, yaw_speed) - 176usize];
    ["Offset of field: entvars_s::modelindex"]
        [::std::mem::offset_of!(entvars_s, modelindex) - 180usize];
    ["Offset of field: entvars_s::model"][::std::mem::offset_of!(entvars_s, model) - 184usize];
    ["Offset of field: entvars_s::viewmodel"]
        [::std::mem::offset_of!(entvars_s, viewmodel) - 188usize];
    ["Offset of field: entvars_s::weaponmodel"]
        [::std::mem::offset_of!(entvars_s, weaponmodel) - 192usize];
    ["Offset of field: entvars_s::absmin"][::std::mem::offset_of!(entvars_s, absmin) - 196usize];
    ["Offset of field: entvars_s::absmax"][::std::mem::offset_of!(entvars_s, absmax) - 208usize];
    ["Offset of field: entvars_s::mins"][::std::mem::offset_of!(entvars_s, mins) - 220usize];
    ["Offset of field: entvars_s::maxs"][::std::mem::offset_of!(entvars_s, maxs) - 232usize];
    ["Offset of field: entvars_s::size"][::std::mem::offset_of!(entvars_s, size) - 244usize];
    ["Offset of field: entvars_s::ltime"][::std::mem::offset_of!(entvars_s, ltime) - 256usize];
    ["Offset of field: entvars_s::nextthink"]
        [::std::mem::offset_of!(entvars_s, nextthink) - 260usize];
    ["Offset of field: entvars_s::movetype"]
        [::std::mem::offset_of!(entvars_s, movetype) - 264usize];
    ["Offset of field: entvars_s::solid"][::std::mem::offset_of!(entvars_s, solid) - 268usize];
    ["Offset of field: entvars_s::skin"][::std::mem::offset_of!(entvars_s, skin) - 272usize];
    ["Offset of field: entvars_s::body"][::std::mem::offset_of!(entvars_s, body) - 276usize];
    ["Offset of field: entvars_s::effects"][::std::mem::offset_of!(entvars_s, effects) - 280usize];
    ["Offset of field: entvars_s::gravity"][::std::mem::offset_of!(entvars_s, gravity) - 284usize];
    ["Offset of field: entvars_s::friction"]
        [::std::mem::offset_of!(entvars_s, friction) - 288usize];
    ["Offset of field: entvars_s::light_level"]
        [::std::mem::offset_of!(entvars_s, light_level) - 292usize];
    ["Offset of field: entvars_s::sequence"]
        [::std::mem::offset_of!(entvars_s, sequence) - 296usize];
    ["Offset of field: entvars_s::gaitsequence"]
        [::std::mem::offset_of!(entvars_s, gaitsequence) - 300usize];
    ["Offset of field: entvars_s::frame"][::std::mem::offset_of!(entvars_s, frame) - 304usize];
    ["Offset of field: entvars_s::animtime"]
        [::std::mem::offset_of!(entvars_s, animtime) - 308usize];
    ["Offset of field: entvars_s::framerate"]
        [::std::mem::offset_of!(entvars_s, framerate) - 312usize];
    ["Offset of field: entvars_s::controller"]
        [::std::mem::offset_of!(entvars_s, controller) - 316usize];
    ["Offset of field: entvars_s::blending"]
        [::std::mem::offset_of!(entvars_s, blending) - 320usize];
    ["Offset of field: entvars_s::scale"][::std::mem::offset_of!(entvars_s, scale) - 324usize];
    ["Offset of field: entvars_s::rendermode"]
        [::std::mem::offset_of!(entvars_s, rendermode) - 328usize];
    ["Offset of field: entvars_s::renderamt"]
        [::std::mem::offset_of!(entvars_s, renderamt) - 332usize];
    ["Offset of field: entvars_s::rendercolor"]
        [::std::mem::offset_of!(entvars_s, rendercolor) - 336usize];
    ["Offset of field: entvars_s::renderfx"]
        [::std::mem::offset_of!(entvars_s, renderfx) - 348usize];
    ["Offset of field: entvars_s::health"][::std::mem::offset_of!(entvars_s, health) - 352usize];
    ["Offset of field: entvars_s::frags"][::std::mem::offset_of!(entvars_s, frags) - 356usize];
    ["Offset of field: entvars_s::weapons"][::std::mem::offset_of!(entvars_s, weapons) - 360usize];
    ["Offset of field: entvars_s::takedamage"]
        [::std::mem::offset_of!(entvars_s, takedamage) - 364usize];
    ["Offset of field: entvars_s::deadflag"]
        [::std::mem::offset_of!(entvars_s, deadflag) - 368usize];
    ["Offset of field: entvars_s::view_ofs"]
        [::std::mem::offset_of!(entvars_s, view_ofs) - 372usize];
    ["Offset of field: entvars_s::button"][::std::mem::offset_of!(entvars_s, button) - 384usize];
    ["Offset of field: entvars_s::impulse"][::std::mem::offset_of!(entvars_s, impulse) - 388usize];
    ["Offset of field: entvars_s::chain"][::std::mem::offset_of!(entvars_s, chain) - 392usize];
    ["Offset of field: entvars_s::dmg_inflictor"]
        [::std::mem::offset_of!(entvars_s, dmg_inflictor) - 396usize];
    ["Offset of field: entvars_s::enemy"][::std::mem::offset_of!(entvars_s, enemy) - 400usize];
    ["Offset of field: entvars_s::aiment"][::std::mem::offset_of!(entvars_s, aiment) - 404usize];
    ["Offset of field: entvars_s::owner"][::std::mem::offset_of!(entvars_s, owner) - 408usize];
    ["Offset of field: entvars_s::groundentity"]
        [::std::mem::offset_of!(entvars_s, groundentity) - 412usize];
    ["Offset of field: entvars_s::spawnflags"]
        [::std::mem::offset_of!(entvars_s, spawnflags) - 416usize];
    ["Offset of field: entvars_s::flags"][::std::mem::offset_of!(entvars_s, flags) - 420usize];
    ["Offset of field: entvars_s::colormap"]
        [::std::mem::offset_of!(entvars_s, colormap) - 424usize];
    ["Offset of field: entvars_s::team"][::std::mem::offset_of!(entvars_s, team) - 428usize];
    ["Offset of field: entvars_s::max_health"]
        [::std::mem::offset_of!(entvars_s, max_health) - 432usize];
    ["Offset of field: entvars_s::teleport_time"]
        [::std::mem::offset_of!(entvars_s, teleport_time) - 436usize];
    ["Offset of field: entvars_s::armortype"]
        [::std::mem::offset_of!(entvars_s, armortype) - 440usize];
    ["Offset of field: entvars_s::armorvalue"]
        [::std::mem::offset_of!(entvars_s, armorvalue) - 444usize];
    ["Offset of field: entvars_s::waterlevel"]
        [::std::mem::offset_of!(entvars_s, waterlevel) - 448usize];
    ["Offset of field: entvars_s::watertype"]
        [::std::mem::offset_of!(entvars_s, watertype) - 452usize];
    ["Offset of field: entvars_s::target"][::std::mem::offset_of!(entvars_s, target) - 456usize];
    ["Offset of field: entvars_s::targetname"]
        [::std::mem::offset_of!(entvars_s, targetname) - 460usize];
    ["Offset of field: entvars_s::netname"][::std::mem::offset_of!(entvars_s, netname) - 464usize];
    ["Offset of field: entvars_s::message"][::std::mem::offset_of!(entvars_s, message) - 468usize];
    ["Offset of field: entvars_s::dmg_take"]
        [::std::mem::offset_of!(entvars_s, dmg_take) - 472usize];
    ["Offset of field: entvars_s::dmg_save"]
        [::std::mem::offset_of!(entvars_s, dmg_save) - 476usize];
    ["Offset of field: entvars_s::dmg"][::std::mem::offset_of!(entvars_s, dmg) - 480usize];
    ["Offset of field: entvars_s::dmgtime"][::std::mem::offset_of!(entvars_s, dmgtime) - 484usize];
    ["Offset of field: entvars_s::noise"][::std::mem::offset_of!(entvars_s, noise) - 488usize];
    ["Offset of field: entvars_s::noise1"][::std::mem::offset_of!(entvars_s, noise1) - 492usize];
    ["Offset of field: entvars_s::noise2"][::std::mem::offset_of!(entvars_s, noise2) - 496usize];
    ["Offset of field: entvars_s::noise3"][::std::mem::offset_of!(entvars_s, noise3) - 500usize];
    ["Offset of field: entvars_s::speed"][::std::mem::offset_of!(entvars_s, speed) - 504usize];
    ["Offset of field: entvars_s::air_finished"]
        [::std::mem::offset_of!(entvars_s, air_finished) - 508usize];
    ["Offset of field: entvars_s::pain_finished"]
        [::std::mem::offset_of!(entvars_s, pain_finished) - 512usize];
    ["Offset of field: entvars_s::radsuit_finished"]
        [::std::mem::offset_of!(entvars_s, radsuit_finished) - 516usize];
    ["Offset of field: entvars_s::pContainingEntity"]
        [::std::mem::offset_of!(entvars_s, pContainingEntity) - 520usize];
    ["Offset of field: entvars_s::playerclass"]
        [::std::mem::offset_of!(entvars_s, playerclass) - 524usize];
    ["Offset of field: entvars_s::maxspeed"]
        [::std::mem::offset_of!(entvars_s, maxspeed) - 528usize];
    ["Offset of field: entvars_s::fov"][::std::mem::offset_of!(entvars_s, fov) - 532usize];
    ["Offset of field: entvars_s::weaponanim"]
        [::std::mem::offset_of!(entvars_s, weaponanim) - 536usize];
    ["Offset of field: entvars_s::pushmsec"]
        [::std::mem::offset_of!(entvars_s, pushmsec) - 540usize];
    ["Offset of field: entvars_s::bInDuck"][::std::mem::offset_of!(entvars_s, bInDuck) - 544usize];
    ["Offset of field: entvars_s::flTimeStepSound"]
        [::std::mem::offset_of!(entvars_s, flTimeStepSound) - 548usize];
    ["Offset of field: entvars_s::flSwimTime"]
        [::std::mem::offset_of!(entvars_s, flSwimTime) - 552usize];
    ["Offset of field: entvars_s::flDuckTime"]
        [::std::mem::offset_of!(entvars_s, flDuckTime) - 556usize];
    ["Offset of field: entvars_s::iStepLeft"]
        [::std::mem::offset_of!(entvars_s, iStepLeft) - 560usize];
    ["Offset of field: entvars_s::flFallVelocity"]
        [::std::mem::offset_of!(entvars_s, flFallVelocity) - 564usize];
    ["Offset of field: entvars_s::gamestate"]
        [::std::mem::offset_of!(entvars_s, gamestate) - 568usize];
    ["Offset of field: entvars_s::oldbuttons"]
        [::std::mem::offset_of!(entvars_s, oldbuttons) - 572usize];
    ["Offset of field: entvars_s::groupinfo"]
        [::std::mem::offset_of!(entvars_s, groupinfo) - 576usize];
    ["Offset of field: entvars_s::iuser1"][::std::mem::offset_of!(entvars_s, iuser1) - 580usize];
    ["Offset of field: entvars_s::iuser2"][::std::mem::offset_of!(entvars_s, iuser2) - 584usize];
    ["Offset of field: entvars_s::iuser3"][::std::mem::offset_of!(entvars_s, iuser3) - 588usize];
    ["Offset of field: entvars_s::iuser4"][::std::mem::offset_of!(entvars_s, iuser4) - 592usize];
    ["Offset of field: entvars_s::fuser1"][::std::mem::offset_of!(entvars_s, fuser1) - 596usize];
    ["Offset of field: entvars_s::fuser2"][::std::mem::offset_of!(entvars_s, fuser2) - 600usize];
    ["Offset of field: entvars_s::fuser3"][::std::mem::offset_of!(entvars_s, fuser3) - 604usize];
    ["Offset of field: entvars_s::fuser4"][::std::mem::offset_of!(entvars_s, fuser4) - 608usize];
    ["Offset of field: entvars_s::vuser1"][::std::mem::offset_of!(entvars_s, vuser1) - 612usize];
    ["Offset of field: entvars_s::vuser2"][::std::mem::offset_of!(entvars_s, vuser2) - 624usize];
    ["Offset of field: entvars_s::vuser3"][::std::mem::offset_of!(entvars_s, vuser3) - 636usize];
    ["Offset of field: entvars_s::vuser4"][::std::mem::offset_of!(entvars_s, vuser4) - 648usize];
    ["Offset of field: entvars_s::euser1"][::std::mem::offset_of!(entvars_s, euser1) - 660usize];
    ["Offset of field: entvars_s::euser2"][::std::mem::offset_of!(entvars_s, euser2) - 664usize];
    ["Offset of field: entvars_s::euser3"][::std::mem::offset_of!(entvars_s, euser3) - 668usize];
    ["Offset of field: entvars_s::euser4"][::std::mem::offset_of!(entvars_s, euser4) - 672usize];
};
pub type entvars_t = entvars_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct edict_s {
    pub free: qboolean,
    pub serialnumber: ::std::os::raw::c_int,
    pub area: link_t,
    pub headnode: ::std::os::raw::c_int,
    pub num_leafs: ::std::os::raw::c_int,
    pub leafnums: [::std::os::raw::c_short; 48usize],
    pub freetime: f32,
    pub pvPrivateData: *mut ::std::os::raw::c_void,
    pub v: entvars_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of edict_s"][::std::mem::size_of::<edict_s>() - 804usize];
    ["Alignment of edict_s"][::std::mem::align_of::<edict_s>() - 4usize];
    ["Offset of field: edict_s::free"][::std::mem::offset_of!(edict_s, free) - 0usize];
    ["Offset of field: edict_s::serialnumber"]
        [::std::mem::offset_of!(edict_s, serialnumber) - 4usize];
    ["Offset of field: edict_s::area"][::std::mem::offset_of!(edict_s, area) - 8usize];
    ["Offset of field: edict_s::headnode"][::std::mem::offset_of!(edict_s, headnode) - 16usize];
    ["Offset of field: edict_s::num_leafs"][::std::mem::offset_of!(edict_s, num_leafs) - 20usize];
    ["Offset of field: edict_s::leafnums"][::std::mem::offset_of!(edict_s, leafnums) - 24usize];
    ["Offset of field: edict_s::freetime"][::std::mem::offset_of!(edict_s, freetime) - 120usize];
    ["Offset of field: edict_s::pvPrivateData"]
        [::std::mem::offset_of!(edict_s, pvPrivateData) - 124usize];
    ["Offset of field: edict_s::v"][::std::mem::offset_of!(edict_s, v) - 128usize];
};
