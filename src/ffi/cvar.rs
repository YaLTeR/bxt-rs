// bindgen halflife/common/cvardef.h --allowlist-type "cvar_s" -- --target=i686-unknown-linux-gnu
// -Ihalflife/{public,common,engine} -include mathlib.h -include const.h
// Keep everything before the generated part.
// Change `cvar_s.name` and `cvars_s.string` to use type `*const ...` for code compatibility.
#![allow(unused, deref_nullptr, nonstandard_style)]

use std::mem::{align_of, size_of};
use std::os::raw::*;
use std::ptr::null;

use bitflags::bitflags;

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq)]
    pub struct Flags: i32 {
        const FCVAR_ARCHIVE = 1;
        const FCVAR_USERINFO = 2;
        const FCVAR_SERVER = 4;
        const FCVAR_EXTDLL = 8;
        const FCVAR_CLIENTDLL = 16;
        const FCVAR_PROTECTED = 32;
        const FCVAR_SPONLY = 64;
        const FCVAR_PRINTABLEONLY = 128;
        const FCVAR_UNLOGGED = 256;
    }
}

/* automatically generated by rust-bindgen 0.71.1 */

// intentionally modify `name` and `strings` field to
// [`*const ::std::os::raw::c_char`]
// instead of the generated [`*mut ...`]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cvar_s {
    pub name: *const ::std::os::raw::c_char,
    pub string: *const ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_int,
    pub value: f32,
    pub next: *mut cvar_s,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cvar_s"][::std::mem::size_of::<cvar_s>() - 20usize];
    ["Alignment of cvar_s"][::std::mem::align_of::<cvar_s>() - 4usize];
    ["Offset of field: cvar_s::name"][::std::mem::offset_of!(cvar_s, name) - 0usize];
    ["Offset of field: cvar_s::string"][::std::mem::offset_of!(cvar_s, string) - 4usize];
    ["Offset of field: cvar_s::flags"][::std::mem::offset_of!(cvar_s, flags) - 8usize];
    ["Offset of field: cvar_s::value"][::std::mem::offset_of!(cvar_s, value) - 12usize];
    ["Offset of field: cvar_s::next"][::std::mem::offset_of!(cvar_s, next) - 16usize];
};
