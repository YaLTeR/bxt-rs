// bindgen halflife/common/cl_entity.h --allowlist-type "cl_entity_s" --
// --target=i686-unknown-linux-gnu -Ihalflife/{public,common,engine,pm_shared} -include mathlib.h
// -include const.h
// Keep everything before the generated part
// Remove the unnecessary qualifiers `::std::os::raw::` and `::std::mem::`
// Remove vec_t and [f32; 3] and replace [f32; 3] with [f32; 3]
// Replace dummy model_s with com_model::model_s
#![allow(unused, nonstandard_style, deref_nullptr)]

use std::mem::offset_of;
use std::os::raw::*;

use super::com_model::model_s;

/* automatically generated by rust-bindgen 0.71.1 */

#[doc = "\tCopyright (c) 1996-2002, Valve LLC. All rights reserved.\n\n\tThis product contains software technology licensed from Id\n\tSoftware, Inc. (\"Id Technology\").  Id Technology (c) 1996 Id Software, Inc.\n\tAll Rights Reserved.\n\n   Use, distribution, and modification of this source code and/or resulting\n   object code is restricted to non-commercial enhancements to products from\n   Valve LLC.  All other use, distribution, or modification is prohibited\n   without written permission from Valve LLC."]
pub type byte = c_uchar;
pub const qboolean_false_: qboolean = 0;
pub const qboolean_true_: qboolean = 1;
pub type qboolean = c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct color24 {
    pub r: byte,
    pub g: byte,
    pub b: byte,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of color24"][size_of::<color24>() - 3usize];
    ["Alignment of color24"][align_of::<color24>() - 1usize];
    ["Offset of field: color24::r"][offset_of!(color24, r) - 0usize];
    ["Offset of field: color24::g"][offset_of!(color24, g) - 1usize];
    ["Offset of field: color24::b"][offset_of!(color24, b) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct colorVec {
    pub r: c_uint,
    pub g: c_uint,
    pub b: c_uint,
    pub a: c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of colorVec"][size_of::<colorVec>() - 16usize];
    ["Alignment of colorVec"][align_of::<colorVec>() - 4usize];
    ["Offset of field: colorVec::r"][offset_of!(colorVec, r) - 0usize];
    ["Offset of field: colorVec::g"][offset_of!(colorVec, g) - 4usize];
    ["Offset of field: colorVec::b"][offset_of!(colorVec, b) - 8usize];
    ["Offset of field: colorVec::a"][offset_of!(colorVec, a) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct efrag_s {
    pub leaf: *mut mleaf_s,
    pub leafnext: *mut efrag_s,
    pub entity: *mut cl_entity_s,
    pub entnext: *mut efrag_s,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of efrag_s"][size_of::<efrag_s>() - 16usize];
    ["Alignment of efrag_s"][align_of::<efrag_s>() - 4usize];
    ["Offset of field: efrag_s::leaf"][offset_of!(efrag_s, leaf) - 0usize];
    ["Offset of field: efrag_s::leafnext"][offset_of!(efrag_s, leafnext) - 4usize];
    ["Offset of field: efrag_s::entity"][offset_of!(efrag_s, entity) - 8usize];
    ["Offset of field: efrag_s::entnext"][offset_of!(efrag_s, entnext) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mouth_t {
    pub mouthopen: byte,
    pub sndcount: byte,
    pub sndavg: c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mouth_t"][size_of::<mouth_t>() - 8usize];
    ["Alignment of mouth_t"][align_of::<mouth_t>() - 4usize];
    ["Offset of field: mouth_t::mouthopen"][offset_of!(mouth_t, mouthopen) - 0usize];
    ["Offset of field: mouth_t::sndcount"][offset_of!(mouth_t, sndcount) - 1usize];
    ["Offset of field: mouth_t::sndavg"][offset_of!(mouth_t, sndavg) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct latchedvars_t {
    pub prevanimtime: f32,
    pub sequencetime: f32,
    pub prevseqblending: [byte; 2usize],
    pub prevorigin: [f32; 3],
    pub prevangles: [f32; 3],
    pub prevsequence: c_int,
    pub prevframe: f32,
    pub prevcontroller: [byte; 4usize],
    pub prevblending: [byte; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of latchedvars_t"][size_of::<latchedvars_t>() - 52usize];
    ["Alignment of latchedvars_t"][align_of::<latchedvars_t>() - 4usize];
    ["Offset of field: latchedvars_t::prevanimtime"]
        [offset_of!(latchedvars_t, prevanimtime) - 0usize];
    ["Offset of field: latchedvars_t::sequencetime"]
        [offset_of!(latchedvars_t, sequencetime) - 4usize];
    ["Offset of field: latchedvars_t::prevseqblending"]
        [offset_of!(latchedvars_t, prevseqblending) - 8usize];
    ["Offset of field: latchedvars_t::prevorigin"][offset_of!(latchedvars_t, prevorigin) - 12usize];
    ["Offset of field: latchedvars_t::prevangles"][offset_of!(latchedvars_t, prevangles) - 24usize];
    ["Offset of field: latchedvars_t::prevsequence"]
        [offset_of!(latchedvars_t, prevsequence) - 36usize];
    ["Offset of field: latchedvars_t::prevframe"][offset_of!(latchedvars_t, prevframe) - 40usize];
    ["Offset of field: latchedvars_t::prevcontroller"]
        [offset_of!(latchedvars_t, prevcontroller) - 44usize];
    ["Offset of field: latchedvars_t::prevblending"]
        [offset_of!(latchedvars_t, prevblending) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct position_history_t {
    pub animtime: f32,
    pub origin: [f32; 3],
    pub angles: [f32; 3],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of position_history_t"][size_of::<position_history_t>() - 28usize];
    ["Alignment of position_history_t"][align_of::<position_history_t>() - 4usize];
    ["Offset of field: position_history_t::animtime"]
        [offset_of!(position_history_t, animtime) - 0usize];
    ["Offset of field: position_history_t::origin"]
        [offset_of!(position_history_t, origin) - 4usize];
    ["Offset of field: position_history_t::angles"]
        [offset_of!(position_history_t, angles) - 16usize];
};
pub type entity_state_t = entity_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct entity_state_s {
    pub entityType: c_int,
    pub number: c_int,
    pub msg_time: f32,
    pub messagenum: c_int,
    pub origin: [f32; 3],
    pub angles: [f32; 3],
    pub modelindex: c_int,
    pub sequence: c_int,
    pub frame: f32,
    pub colormap: c_int,
    pub skin: c_short,
    pub solid: c_short,
    pub effects: c_int,
    pub scale: f32,
    pub eflags: byte,
    pub rendermode: c_int,
    pub renderamt: c_int,
    pub rendercolor: color24,
    pub renderfx: c_int,
    pub movetype: c_int,
    pub animtime: f32,
    pub framerate: f32,
    pub body: c_int,
    pub controller: [byte; 4usize],
    pub blending: [byte; 4usize],
    pub velocity: [f32; 3],
    pub mins: [f32; 3],
    pub maxs: [f32; 3],
    pub aiment: c_int,
    pub owner: c_int,
    pub friction: f32,
    pub gravity: f32,
    pub team: c_int,
    pub playerclass: c_int,
    pub health: c_int,
    pub spectator: qboolean,
    pub weaponmodel: c_int,
    pub gaitsequence: c_int,
    pub basevelocity: [f32; 3],
    pub usehull: c_int,
    pub oldbuttons: c_int,
    pub onground: c_int,
    pub iStepLeft: c_int,
    pub flFallVelocity: f32,
    pub fov: f32,
    pub weaponanim: c_int,
    pub startpos: [f32; 3],
    pub endpos: [f32; 3],
    pub impacttime: f32,
    pub starttime: f32,
    pub iuser1: c_int,
    pub iuser2: c_int,
    pub iuser3: c_int,
    pub iuser4: c_int,
    pub fuser1: f32,
    pub fuser2: f32,
    pub fuser3: f32,
    pub fuser4: f32,
    pub vuser1: [f32; 3],
    pub vuser2: [f32; 3],
    pub vuser3: [f32; 3],
    pub vuser4: [f32; 3],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of entity_state_s"][size_of::<entity_state_s>() - 340usize];
    ["Alignment of entity_state_s"][align_of::<entity_state_s>() - 4usize];
    ["Offset of field: entity_state_s::entityType"]
        [offset_of!(entity_state_s, entityType) - 0usize];
    ["Offset of field: entity_state_s::number"][offset_of!(entity_state_s, number) - 4usize];
    ["Offset of field: entity_state_s::msg_time"][offset_of!(entity_state_s, msg_time) - 8usize];
    ["Offset of field: entity_state_s::messagenum"]
        [offset_of!(entity_state_s, messagenum) - 12usize];
    ["Offset of field: entity_state_s::origin"][offset_of!(entity_state_s, origin) - 16usize];
    ["Offset of field: entity_state_s::angles"][offset_of!(entity_state_s, angles) - 28usize];
    ["Offset of field: entity_state_s::modelindex"]
        [offset_of!(entity_state_s, modelindex) - 40usize];
    ["Offset of field: entity_state_s::sequence"][offset_of!(entity_state_s, sequence) - 44usize];
    ["Offset of field: entity_state_s::frame"][offset_of!(entity_state_s, frame) - 48usize];
    ["Offset of field: entity_state_s::colormap"][offset_of!(entity_state_s, colormap) - 52usize];
    ["Offset of field: entity_state_s::skin"][offset_of!(entity_state_s, skin) - 56usize];
    ["Offset of field: entity_state_s::solid"][offset_of!(entity_state_s, solid) - 58usize];
    ["Offset of field: entity_state_s::effects"][offset_of!(entity_state_s, effects) - 60usize];
    ["Offset of field: entity_state_s::scale"][offset_of!(entity_state_s, scale) - 64usize];
    ["Offset of field: entity_state_s::eflags"][offset_of!(entity_state_s, eflags) - 68usize];
    ["Offset of field: entity_state_s::rendermode"]
        [offset_of!(entity_state_s, rendermode) - 72usize];
    ["Offset of field: entity_state_s::renderamt"][offset_of!(entity_state_s, renderamt) - 76usize];
    ["Offset of field: entity_state_s::rendercolor"]
        [offset_of!(entity_state_s, rendercolor) - 80usize];
    ["Offset of field: entity_state_s::renderfx"][offset_of!(entity_state_s, renderfx) - 84usize];
    ["Offset of field: entity_state_s::movetype"][offset_of!(entity_state_s, movetype) - 88usize];
    ["Offset of field: entity_state_s::animtime"][offset_of!(entity_state_s, animtime) - 92usize];
    ["Offset of field: entity_state_s::framerate"][offset_of!(entity_state_s, framerate) - 96usize];
    ["Offset of field: entity_state_s::body"][offset_of!(entity_state_s, body) - 100usize];
    ["Offset of field: entity_state_s::controller"]
        [offset_of!(entity_state_s, controller) - 104usize];
    ["Offset of field: entity_state_s::blending"][offset_of!(entity_state_s, blending) - 108usize];
    ["Offset of field: entity_state_s::velocity"][offset_of!(entity_state_s, velocity) - 112usize];
    ["Offset of field: entity_state_s::mins"][offset_of!(entity_state_s, mins) - 124usize];
    ["Offset of field: entity_state_s::maxs"][offset_of!(entity_state_s, maxs) - 136usize];
    ["Offset of field: entity_state_s::aiment"][offset_of!(entity_state_s, aiment) - 148usize];
    ["Offset of field: entity_state_s::owner"][offset_of!(entity_state_s, owner) - 152usize];
    ["Offset of field: entity_state_s::friction"][offset_of!(entity_state_s, friction) - 156usize];
    ["Offset of field: entity_state_s::gravity"][offset_of!(entity_state_s, gravity) - 160usize];
    ["Offset of field: entity_state_s::team"][offset_of!(entity_state_s, team) - 164usize];
    ["Offset of field: entity_state_s::playerclass"]
        [offset_of!(entity_state_s, playerclass) - 168usize];
    ["Offset of field: entity_state_s::health"][offset_of!(entity_state_s, health) - 172usize];
    ["Offset of field: entity_state_s::spectator"]
        [offset_of!(entity_state_s, spectator) - 176usize];
    ["Offset of field: entity_state_s::weaponmodel"]
        [offset_of!(entity_state_s, weaponmodel) - 180usize];
    ["Offset of field: entity_state_s::gaitsequence"]
        [offset_of!(entity_state_s, gaitsequence) - 184usize];
    ["Offset of field: entity_state_s::basevelocity"]
        [offset_of!(entity_state_s, basevelocity) - 188usize];
    ["Offset of field: entity_state_s::usehull"][offset_of!(entity_state_s, usehull) - 200usize];
    ["Offset of field: entity_state_s::oldbuttons"]
        [offset_of!(entity_state_s, oldbuttons) - 204usize];
    ["Offset of field: entity_state_s::onground"][offset_of!(entity_state_s, onground) - 208usize];
    ["Offset of field: entity_state_s::iStepLeft"]
        [offset_of!(entity_state_s, iStepLeft) - 212usize];
    ["Offset of field: entity_state_s::flFallVelocity"]
        [offset_of!(entity_state_s, flFallVelocity) - 216usize];
    ["Offset of field: entity_state_s::fov"][offset_of!(entity_state_s, fov) - 220usize];
    ["Offset of field: entity_state_s::weaponanim"]
        [offset_of!(entity_state_s, weaponanim) - 224usize];
    ["Offset of field: entity_state_s::startpos"][offset_of!(entity_state_s, startpos) - 228usize];
    ["Offset of field: entity_state_s::endpos"][offset_of!(entity_state_s, endpos) - 240usize];
    ["Offset of field: entity_state_s::impacttime"]
        [offset_of!(entity_state_s, impacttime) - 252usize];
    ["Offset of field: entity_state_s::starttime"]
        [offset_of!(entity_state_s, starttime) - 256usize];
    ["Offset of field: entity_state_s::iuser1"][offset_of!(entity_state_s, iuser1) - 260usize];
    ["Offset of field: entity_state_s::iuser2"][offset_of!(entity_state_s, iuser2) - 264usize];
    ["Offset of field: entity_state_s::iuser3"][offset_of!(entity_state_s, iuser3) - 268usize];
    ["Offset of field: entity_state_s::iuser4"][offset_of!(entity_state_s, iuser4) - 272usize];
    ["Offset of field: entity_state_s::fuser1"][offset_of!(entity_state_s, fuser1) - 276usize];
    ["Offset of field: entity_state_s::fuser2"][offset_of!(entity_state_s, fuser2) - 280usize];
    ["Offset of field: entity_state_s::fuser3"][offset_of!(entity_state_s, fuser3) - 284usize];
    ["Offset of field: entity_state_s::fuser4"][offset_of!(entity_state_s, fuser4) - 288usize];
    ["Offset of field: entity_state_s::vuser1"][offset_of!(entity_state_s, vuser1) - 292usize];
    ["Offset of field: entity_state_s::vuser2"][offset_of!(entity_state_s, vuser2) - 304usize];
    ["Offset of field: entity_state_s::vuser3"][offset_of!(entity_state_s, vuser3) - 316usize];
    ["Offset of field: entity_state_s::vuser4"][offset_of!(entity_state_s, vuser4) - 328usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_entity_s {
    pub index: c_int,
    pub player: qboolean,
    pub baseline: entity_state_t,
    pub prevstate: entity_state_t,
    pub curstate: entity_state_t,
    pub current_position: c_int,
    pub ph: [position_history_t; 64usize],
    pub mouth: mouth_t,
    pub latched: latchedvars_t,
    pub lastmove: f32,
    pub origin: [f32; 3],
    pub angles: [f32; 3],
    pub attachment: [[f32; 3]; 4usize],
    pub trivial_accept: c_int,
    pub model: *mut model_s,
    pub efrag: *mut efrag_s,
    pub topnode: *mut mnode_s,
    pub syncbase: f32,
    pub visframe: c_int,
    pub cvFloorColor: colorVec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cl_entity_s"][size_of::<cl_entity_s>() - 3000usize];
    ["Alignment of cl_entity_s"][align_of::<cl_entity_s>() - 4usize];
    ["Offset of field: cl_entity_s::index"][offset_of!(cl_entity_s, index) - 0usize];
    ["Offset of field: cl_entity_s::player"][offset_of!(cl_entity_s, player) - 4usize];
    ["Offset of field: cl_entity_s::baseline"][offset_of!(cl_entity_s, baseline) - 8usize];
    ["Offset of field: cl_entity_s::prevstate"][offset_of!(cl_entity_s, prevstate) - 348usize];
    ["Offset of field: cl_entity_s::curstate"][offset_of!(cl_entity_s, curstate) - 688usize];
    ["Offset of field: cl_entity_s::current_position"]
        [offset_of!(cl_entity_s, current_position) - 1028usize];
    ["Offset of field: cl_entity_s::ph"][offset_of!(cl_entity_s, ph) - 1032usize];
    ["Offset of field: cl_entity_s::mouth"][offset_of!(cl_entity_s, mouth) - 2824usize];
    ["Offset of field: cl_entity_s::latched"][offset_of!(cl_entity_s, latched) - 2832usize];
    ["Offset of field: cl_entity_s::lastmove"][offset_of!(cl_entity_s, lastmove) - 2884usize];
    ["Offset of field: cl_entity_s::origin"][offset_of!(cl_entity_s, origin) - 2888usize];
    ["Offset of field: cl_entity_s::angles"][offset_of!(cl_entity_s, angles) - 2900usize];
    ["Offset of field: cl_entity_s::attachment"][offset_of!(cl_entity_s, attachment) - 2912usize];
    ["Offset of field: cl_entity_s::trivial_accept"]
        [offset_of!(cl_entity_s, trivial_accept) - 2960usize];
    ["Offset of field: cl_entity_s::model"][offset_of!(cl_entity_s, model) - 2964usize];
    ["Offset of field: cl_entity_s::efrag"][offset_of!(cl_entity_s, efrag) - 2968usize];
    ["Offset of field: cl_entity_s::topnode"][offset_of!(cl_entity_s, topnode) - 2972usize];
    ["Offset of field: cl_entity_s::syncbase"][offset_of!(cl_entity_s, syncbase) - 2976usize];
    ["Offset of field: cl_entity_s::visframe"][offset_of!(cl_entity_s, visframe) - 2980usize];
    ["Offset of field: cl_entity_s::cvFloorColor"]
        [offset_of!(cl_entity_s, cvFloorColor) - 2984usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mleaf_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mnode_s {
    pub _address: u8,
}
